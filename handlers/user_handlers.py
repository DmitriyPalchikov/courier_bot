"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫—É—Ä—å–µ—Ä—Å–∫–æ–≥–æ –±–æ—Ç–∞.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥,
—Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π. –ö–∞–∂–¥—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π
—Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–û—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:
- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (/start, /help)
- –í—ã–±–æ—Ä –∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –ø–æ–¥—Å—á—ë—Ç –∫–æ—Ä–æ–±–æ–∫
- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
"""

import logging
from typing import Optional, List
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, PhotoSize
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, and_
from sqlalchemy.orm import selectinload

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from database.database import get_session
from database.models import User, Route, RouteProgress, Delivery
from states.user_states import RouteStates
from keyboards.user_keyboards import (
    get_main_menu_keyboard,
    get_cities_keyboard, 
    get_route_points_keyboard,
    get_confirmation_keyboard,
    get_complete_route_keyboard
)
from config import (
    WELCOME_MESSAGE,
    HELP_MESSAGE, 
    ERROR_MESSAGES,
    AVAILABLE_ROUTES,
    MOSCOW_DELIVERY_ADDRESSES,
    MIN_BOXES,
    MAX_BOXES
)
from utils.route_manager import RouteManager

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
user_router = Router(name='user_router')

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)


@user_router.message(Command('start'))
async def cmd_start(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è:
    1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    2. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    3. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    4. –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –û—á–∏—â–∞–µ–º –ª—é–±—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name
    
    # –†–∞–±–æ—Ç–∞–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    async for session in get_session():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        result = await session.get(User, user_id)
        
        if not result:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_user = User(
                telegram_id=user_id,
                username=username,
                full_name=full_name,
                is_active=True
            )
            session.add(new_user)
            await session.commit()
            
            logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} (@{username})")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result.username = username
            result.full_name = full_name
            result.is_active = True
            await session.commit()
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    await message.answer(
        text=WELCOME_MESSAGE,
        reply_markup=get_main_menu_keyboard()
    )


@user_router.message(Command('help'))
async def cmd_help(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.
    
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await message.answer(
        text=HELP_MESSAGE,
        reply_markup=get_main_menu_keyboard()
    )


@user_router.message(F.text == "üöö –í—ã–±—Ä–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç")
async def select_route(message: Message, state: FSMContext) -> None:
    """
    –ù–∞—á–∞–ª–æ –≤—ã–±–æ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞.
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
    –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stmt = select(RouteProgress).where(
            and_(
                RouteProgress.user_id == message.from_user.id,
                RouteProgress.status.in_(['pending', 'in_progress'])
            )
        )
        active_route = await session.scalar(stmt)
        
        if active_route:
            await message.answer(
                "‚ùóÔ∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ.",
                reply_markup=get_main_menu_keyboard()
            )
            return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    await state.set_state(RouteStates.waiting_for_city_selection)
    
    await message.answer(
        "üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞:",
        reply_markup=get_cities_keyboard()
    )


@user_router.callback_query(F.data.startswith("city:"), RouteStates.waiting_for_city_selection)
async def city_selected(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞.
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
    """
    # –ü—Ä–∏–≤–æ–¥–∏–º callback.data –∫ —Å—Ç—Ä–æ–∫–µ
    raw_data = callback.data
    if isinstance(raw_data, (list, tuple)):
        raw_data = raw_data[0]
    city_name = str(raw_data).split(":", 1)[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ—Ä–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if city_name not in AVAILABLE_ROUTES:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    route_points = AVAILABLE_ROUTES[city_name]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –∏ –º–∞—Ä—à—Ä—É—Ç
    await state.update_data(
        selected_city=city_name,
        route_points=route_points,
        current_point_index=0,
        collected_boxes={}
    )
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.set_state(RouteStates.waiting_for_route_confirmation)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ
    route_info = f"üìç <b>–í—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: {city_name}</b>\n\n"
    route_info += f"üìã <b>–¢–æ—á–∫–∏ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è ({len(route_points)}):</b>\n"
    
    for i, point in enumerate(route_points, 1):
        route_info += f"{i}. <b>{point['organization']}</b> - {point['name']}\n"
        route_info += f"   üìç {point['address']}\n\n"
    
    route_info += "‚ùì <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞:</b>"
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    from keyboards.user_keyboards import get_confirmation_keyboard
    
    await callback.message.edit_text(
        text=route_info,
        reply_markup=get_confirmation_keyboard(
            confirm_text="‚úÖ –ù–∞—á–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç",
            cancel_text="‚ùå –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥",
            confirm_callback="confirm_route_start",
            cancel_callback="back_to_city_selection"
        )
    )
    
    await callback.answer()

@user_router.callback_query(F.data == "confirm_route_start", RouteStates.waiting_for_route_confirmation)
async def confirm_route_start(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∞.
    
    –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞.
    """
    state_data = await state.get_data()
    selected_city = state_data.get('selected_city')
    route_points = state_data.get('route_points')
    
    if not route_points:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        await state.clear()
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
    current_point = route_points[0]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(
        current_point=current_point,
        total_points=len(route_points)
    )
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    await state.set_state(RouteStates.waiting_for_photo)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–µ
    point_info = (
        f"üöÄ <b>–ú–∞—Ä—à—Ä—É—Ç {selected_city} –Ω–∞—á–∞—Ç!</b>\n\n"
        f"üìç <b>–¢–æ—á–∫–∞ 1 –∏–∑ {len(route_points)}</b>\n"
        f"üè¢ <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</b> {current_point['organization']}\n"
        f"üè† <b>–ê–¥—Ä–µ—Å:</b> {current_point['address']}\n\n"
        f"üì∏ <b>–°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ</b>"
    )
    
    await callback.message.edit_text(
        text=point_info,
        reply_markup=None
    )
    
    await callback.answer("–ú–∞—Ä—à—Ä—É—Ç –Ω–∞—á–∞—Ç!")


@user_router.callback_query(F.data == "back_to_city_selection", RouteStates.waiting_for_route_confirmation)
async def back_to_city_selection(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞.
    
    –û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ —Å–Ω–æ–≤–∞.
    """
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    await state.set_state(RouteStates.waiting_for_city_selection)
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
    await state.update_data(
        selected_city=None,
        route_points=None,
        current_point=None
    )
    
    await callback.message.edit_text(
        text="üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞:",
        reply_markup=get_cities_keyboard()
    )
    
    await callback.answer("–í—ã–±–æ—Ä –æ—Ç–º–µ–Ω—ë–Ω")


@user_router.callback_query(F.data == "cancel_city_selection")
async def cancel_city_selection(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞.
    
    –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    
    Args:
        callback: –û–±—ä–µ–∫—Ç callback query –æ—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    await state.clear()
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await callback.message.edit_text(
        text="‚ùå –í—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç–º–µ–Ω—ë–Ω.",
        reply_markup=None
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )
    
    await callback.answer("–í—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç–º–µ–Ω—ë–Ω")



@user_router.callback_query(F.data == "cancel_route")
async def cancel_route(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞.
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –º–∞—Ä—à—Ä—É—Ç–∞.
    
    Args:
        callback: –û–±—ä–µ–∫—Ç callback query –æ—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –º–∞—Ä—à—Ä—É—Ç–∞
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    await callback.message.edit_text(
        text="‚ö†Ô∏è <b>–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç?</b>\n\n"
             "–í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω!",
        reply_markup=get_confirmation_keyboard(
            confirm_text="‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å",
            cancel_text="‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", 
            confirm_callback="confirm_cancel_route",
            cancel_callback="back_to_route"
        )
    )
    
    await callback.answer()


@user_router.callback_query(F.data == "confirm_cancel_route")
async def confirm_cancel_route(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –º–∞—Ä—à—Ä—É—Ç–∞.
    """
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    await callback.message.edit_text(
        text="‚úÖ –ú–∞—Ä—à—Ä—É—Ç –æ—Ç–º–µ–Ω—ë–Ω.",
        reply_markup=get_main_menu_keyboard()
    )
    
    await callback.answer("–ú–∞—Ä—à—Ä—É—Ç –æ—Ç–º–µ–Ω—ë–Ω")

@user_router.callback_query(F.data == "back_to_route")
async def back_to_route(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É.
    """
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    
    if current_point:
        point_info = (
            f"üìç <b>–¢–µ–∫—É—â–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞:</b>\n\n"
            f"üè¢ <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</b> {current_point['organization']}\n"
            f"üè† <b>–ê–¥—Ä–µ—Å:</b> {current_point['address']}\n\n"
            f"üì∏ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ"
        )
        
        await callback.message.edit_text(
            text=point_info,
            reply_markup=None
        )
    else:
        await callback.message.edit_text(
            text="‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=None
        )
        
        await callback.message.answer(
            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )
    
    await callback.answer()

@user_router.message(F.photo, RouteStates.waiting_for_photo)
async def photo_received(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞.
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ—Ä–æ–±–æ–∫.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    
    if not current_point:
        await message.answer(ERROR_MESSAGES['route_not_selected'])
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (—Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞)
    photo: PhotoSize = message.photo[-1]
    await state.update_data(current_photo_file_id=photo.file_id)
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ—Ä–æ–±–æ–∫
    await state.set_state(RouteStates.waiting_for_boxes_count)
    
    await message.answer(
        f"üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
        f"üì¶ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ–±–æ–∫, —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –≤ —Ç–æ—á–∫–µ "
        f"<b>{current_point['name']}</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {MIN_BOXES} –¥–æ {MAX_BOXES}:"
    )


@user_router.message(F.text, RouteStates.waiting_for_boxes_count)
async def boxes_count_received(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ—Ä–æ–±–æ–∫.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å
    –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –º–∞—Ä—à—Ä—É—Ç–∞.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ—Ä–æ–±–æ–∫
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    try:
        boxes_count = int(message.text.strip())
    except ValueError:
        await message.answer(
            f"‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç {MIN_BOXES} –¥–æ {MAX_BOXES}"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
    if boxes_count < MIN_BOXES or boxes_count > MAX_BOXES:
        await message.answer(ERROR_MESSAGES['invalid_boxes_count'])
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    current_photo_file_id = state_data.get('current_photo_file_id')
    selected_city = state_data.get('selected_city')
    current_point_index = state_data.get('current_point_index', 0)
    total_points = state_data.get('total_points', 0)
    collected_boxes = state_data.get('collected_boxes', {})
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async for session in get_session():
        # –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ë–î
        stmt = select(Route).where(
            and_(
                Route.city_name == selected_city,
                Route.point_name == current_point['name'],
                Route.organization == current_point['organization']
            )
        )
        route_record = await session.scalar(stmt)
        
        if not route_record:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –º–∞—Ä—à—Ä—É—Ç–∞
            coords = current_point.get('coordinates', (None, None))
            lat, lon = coords if isinstance(coords, tuple) else (None, None)

            route_record = Route(
                city_name=selected_city,
                point_name=current_point['name'],
                address=current_point['address'],
                organization=current_point['organization'],
                latitude=lat,
                longitude=lon,
                order_index=current_point_index
            )
            session.add(route_record)
            await session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –±–µ–∑ –∫–æ–º–º–∏—Ç–∞
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress = RouteProgress(
            user_id=message.from_user.id,
            route_id=route_record.id,
            boxes_count=boxes_count,
            photo_file_id=current_photo_file_id,
            status='completed'
        )
        session.add(progress)
        await session.commit()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –∫–æ—Ä–æ–±–æ–∫ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º
    org = current_point['organization']
    collected_boxes[org] = collected_boxes.get(org, 0) + boxes_count
    await state.update_data(collected_boxes=collected_boxes)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â—ë —Ç–æ—á–∫–∏ –≤ –º–∞—Ä—à—Ä—É—Ç–µ
    next_point_index = current_point_index + 1
    
    if next_point_index < total_points:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–µ
        route_points = AVAILABLE_ROUTES[selected_city]
        next_point = route_points[next_point_index]
        
        await state.update_data(
            current_point=next_point,
            current_point_index=next_point_index
        )
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–∏
        await state.set_state(RouteStates.waiting_for_photo)
        
        point_info = (
            f"‚úÖ –¢–æ—á–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ–±—Ä–∞–Ω–æ –∫–æ—Ä–æ–±–æ–∫: {boxes_count}\n\n"
            f"üìç <b>–°–ª–µ–¥—É—é—â–∞—è —Ç–æ—á–∫–∞ {next_point_index + 1} –∏–∑ {total_points}</b>\n"
            f"üè¢ <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</b> {next_point['organization']}\n"
            f"üè† <b>–ê–¥—Ä–µ—Å:</b> {next_point['address']}\n\n"
            f"üì∏ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ"
        )
        
        await message.answer(point_info)
        
    else:
        # –í—Å–µ —Ç–æ—á–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –º–∞—Ä—à—Ä—É—Ç–∞
        await state.set_state(RouteStates.waiting_for_route_completion)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –ø–æ –º–∞—Ä—à—Ä—É—Ç—É
        summary = f"üéâ <b>–í—Å–µ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω—ã!</b>\n\n"
        summary += f"üìä <b>–°–≤–æ–¥–∫–∞ –ø–æ —Å–±–æ—Ä—É:</b>\n"
        
        total_collected = 0
        for organization, count in collected_boxes.items():
            summary += f"‚Ä¢ {organization}: {count} –∫–æ—Ä–æ–±–æ–∫\n"
            total_collected += count
        
        summary += f"\nüì¶ <b>–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ:</b> {total_collected} –∫–æ—Ä–æ–±–æ–∫"
        
        await message.answer(
            text=summary,
            reply_markup=get_complete_route_keyboard()
        )


@user_router.callback_query(F.data == "complete_route", RouteStates.waiting_for_route_completion)
async def complete_route(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ú–æ—Å–∫–≤—É.
    
    –°–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å–∏ –¥–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç
    —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
    
    Args:
        callback: –û–±—ä–µ–∫—Ç callback query –æ—Ç –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    state_data = await state.get_data()
    collected_boxes = state_data.get('collected_boxes', {})
    selected_city = state_data.get('selected_city')
    
    # –°–æ–∑–¥–∞—ë–º –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    async for session in get_session():
        for organization, boxes_count in collected_boxes.items():
            if boxes_count > 0:  # –°–æ–∑–¥–∞—ë–º –¥–æ—Å—Ç–∞–≤–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ—Ä–æ–±–∫–∏
                delivery_address = MOSCOW_DELIVERY_ADDRESSES.get(organization, {})
                
                delivery = Delivery(
                    organization=organization,
                    total_boxes=boxes_count,
                    delivery_address=delivery_address.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                    contact_info=delivery_address.get('contact', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                    status='pending'
                )
                session.add(delivery)
        
        await session.commit()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    completion_message = (
        f"‚úÖ <b>–ú–∞—Ä—à—Ä—É—Ç {selected_city} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω!</b>\n\n"
        f"üìã –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –≤ –ú–æ—Å–∫–≤—É:\n\n"
    )
    
    for organization, boxes_count in collected_boxes.items():
        if boxes_count > 0:
            address = MOSCOW_DELIVERY_ADDRESSES.get(organization, {}).get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')
            completion_message += f"üì¶ <b>{organization}:</b> {boxes_count} –∫–æ—Ä–æ–±–æ–∫\n"
            completion_message += f"üè† –ê–¥—Ä–µ—Å: {address}\n\n"
    
    completion_message += "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ."
    
    await callback.message.edit_text(
        text=completion_message,
        reply_markup=None
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.answer(
        "üè† –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞",
        reply_markup=get_main_menu_keyboard()
    )
    
    await callback.answer("–ú–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")


@user_router.message(F.text == "üìä –ú–æ–∏ –º–∞—Ä—à—Ä—É—Ç—ã")
async def my_routes(message: Message) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
        stmt = select(RouteProgress).options(
            selectinload(RouteProgress.route)
        ).where(
            RouteProgress.user_id == message.from_user.id
        ).order_by(RouteProgress.visited_at.desc())
        
        routes = await session.scalars(stmt)
        routes_list = routes.all()
        
        if not routes_list:
            await message.answer(
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ –¥–∞—Ç–µ –∏ –≥–æ—Ä–æ–¥—É
        routes_summary = {}
        for route_progress in routes_list:
            date = route_progress.visited_at.strftime("%d.%m.%Y")
            city = route_progress.route.city_name
            
            key = f"{date} - {city}"
            if key not in routes_summary:
                routes_summary[key] = []
            
            routes_summary[key].append(route_progress)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = "üìä <b>–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤:</b>\n\n"
        
        for route_key, progresses in list(routes_summary.items())[:10]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
            response += f"üìÖ <b>{route_key}</b>\n"
            
            total_boxes = sum(p.boxes_count for p in progresses)
            organizations = set(p.route.organization for p in progresses)
            
            response += f"üì¶ –°–æ–±—Ä–∞–Ω–æ –∫–æ—Ä–æ–±–æ–∫: {total_boxes}\n"
            response += f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {', '.join(organizations)}\n"
            response += f"üìç –¢–æ—á–µ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ: {len(progresses)}\n\n"
        
        await message.answer(
            text=response,
            reply_markup=get_main_menu_keyboard()
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@user_router.message()
async def unknown_message(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    
    –ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é —Å –±–æ—Ç–æ–º.
    
    Args:
        message: –û–±—ä–µ–∫—Ç –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    current_state = await state.get_state()
    
    if current_state == RouteStates.waiting_for_photo:
        await message.answer(ERROR_MESSAGES['photo_required'])
    elif current_state == RouteStates.waiting_for_boxes_count:
        await message.answer(ERROR_MESSAGES['invalid_boxes_count'])
    else:
        await message.answer(
            "ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.",
            reply_markup=get_main_menu_keyboard()
        )
