"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫—É—Ä—å–µ—Ä—Å–∫–æ–≥–æ –±–æ—Ç–∞.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥,
—Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π. –ö–∞–∂–¥—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π
—Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–û—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:
- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (/start, /help)
- –í—ã–±–æ—Ä –∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –ø–æ–¥—Å—á—ë—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
"""

import logging
from typing import Optional, List
from datetime import datetime, timedelta
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, PhotoSize, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, and_
from sqlalchemy.orm import selectinload

from utils.progress_bar import format_route_progress, format_route_summary

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from database.database import get_session
from database.models import User, Route, RouteProgress, Delivery, RoutePhoto, LabSummary, LabSummaryPhoto, MoscowRoute
from utils.callback_manager import (
    parse_callback,
    create_lab_data_callback, create_specific_lab_callback, create_lab_photo_callback,
    create_lab_comment_callback, create_back_to_route_callback
)
from states.user_states import RouteStates
from keyboards.user_keyboards import (
    get_main_menu_keyboard,
    get_cities_keyboard, 
    get_route_points_keyboard,
    get_confirmation_keyboard,
    get_complete_route_keyboard,
    get_photo_actions_keyboard,
    get_finish_photos_keyboard,
    get_point_data_management_keyboard,
    get_route_selection_keyboard,
    get_route_detail_keyboard,
    get_photos_viewer_keyboard,
    get_lab_selection_keyboard,
    get_lab_summary_management_keyboard,
    get_lab_photos_keyboard,
    get_lab_comment_confirmation_keyboard,
    get_route_lab_data_keyboard,
    get_lab_data_viewer_keyboard,
    get_point_action_keyboard,
    get_moscow_final_comment_keyboard
)
from config import (
    WELCOME_MESSAGE,
    HELP_MESSAGE, 
    ERROR_MESSAGES,
    AVAILABLE_ROUTES,
    MOSCOW_DELIVERY_ADDRESSES,
    MIN_CONTAINERS,
    MAX_CONTAINERS
)
from utils.route_manager import RouteManager

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
user_router = Router(name='user_router')

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)


@user_router.message(Command('start'))
async def cmd_start(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è:
    1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    2. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    3. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    4. –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –û—á–∏—â–∞–µ–º –ª—é–±—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name
    
    # –†–∞–±–æ—Ç–∞–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    async for session in get_session():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        result = await session.get(User, user_id)
        
        if not result:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_user = User(
                telegram_id=user_id,
                username=username,
                full_name=full_name,
                is_active=True
            )
            session.add(new_user)
            await session.commit()
            
            logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} (@{username})")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result.username = username
            result.full_name = full_name
            result.is_active = True
            await session.commit()
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    await message.answer(
        text=WELCOME_MESSAGE,
        reply_markup=get_main_menu_keyboard()
    )


@user_router.message(Command('help'))
async def cmd_help(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.
    
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await message.answer(
        text=HELP_MESSAGE,
        reply_markup=get_main_menu_keyboard()
    )


@user_router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_button(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ùì –ü–æ–º–æ—â—å".
    
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await message.answer(
        text=HELP_MESSAGE,
        reply_markup=get_main_menu_keyboard()
    )


@user_router.message(F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def about_bot(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ÑπÔ∏è –û –±–æ—Ç–µ".
    
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏ –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    about_text = """
‚ÑπÔ∏è <b>–û –±–æ—Ç–µ –∫—É—Ä—å–µ—Ä—Å–∫–æ–π —Å–ª—É–∂–±—ã</b>

ü§ñ <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</b>
–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –∫—É—Ä—å–µ—Ä–∞–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ —Å–±–æ—Ä—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º–∏ –æ–±—Ä–∞–∑—Ü–∞–º–∏ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π.

üéØ <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ üìã –í–µ–¥–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ –≥–æ—Ä–æ–¥–∞–º
‚Ä¢ üì∏ –§–∏–∫—Å–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–±–æ—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
‚Ä¢ üì¶ –£—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
‚Ä¢ üí¨ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
‚Ä¢ üè• –û—Ç—á–µ—Ç—ã –ø–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è–º
‚Ä¢ üìä –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤

üè¢ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:</b>
‚Ä¢ –ö–î–õ (–ö–ª–∏–Ω–∏–∫–æ-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏)
‚Ä¢ –•–æ–≤–µ—Ä (–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ü–µ–Ω—Ç—Ä—ã)
‚Ä¢ –î–∞—Ä—Ç–∏—Å (–¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω—Ç—Ä—ã)

üì± <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
–ù–∞–∂–º–∏—Ç–µ "‚ùì –ü–æ–º–æ—â—å" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏

üë®‚Äçüíª <b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> –ü–∞–ª—å—á–∏–∫–æ–≤ –î–º–∏—Ç—Ä–∏–π –ê–Ω–¥—Ä–µ–µ–≤–∏—á
üìÖ <b>–í–µ—Ä—Å–∏—è:</b> –°–µ–Ω—Ç—è–±—Ä—å 2025

–£–¥–∞—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã! üöö‚ú®
"""
    await message.answer(
        text=about_text,
        reply_markup=get_main_menu_keyboard()
    )


@user_router.message(F.text == "üöö –í—ã–±—Ä–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç")
async def select_route(message: Message, state: FSMContext) -> None:
    """
    –ù–∞—á–∞–ª–æ –≤—ã–±–æ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞.
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
    –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stmt = select(RouteProgress).where(
            and_(
                RouteProgress.user_id == message.from_user.id,
                RouteProgress.status.in_(['pending', 'in_progress'])
            )
        )
        active_route = await session.scalar(stmt)
        
        if active_route:
            await message.answer(
                "‚ùóÔ∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ.",
                reply_markup=get_main_menu_keyboard()
            )
            return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    await state.set_state(RouteStates.waiting_for_city_selection)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤
    from keyboards.user_keyboards import get_cities_keyboard_async
    cities_keyboard = await get_cities_keyboard_async()
    
    await message.answer(
        "üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞:",
        reply_markup=cities_keyboard
    )


@user_router.callback_query(F.data.startswith("city:"), RouteStates.waiting_for_city_selection)
async def city_selected(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞.
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
    """
    # –ü—Ä–∏–≤–æ–¥–∏–º callback.data –∫ —Å—Ç—Ä–æ–∫–µ
    raw_data = callback.data
    if isinstance(raw_data, (list, tuple)):
        raw_data = raw_data[0]
    city_name = str(raw_data).split(":", 1)[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã (–≤–∫–ª—é—á–∞—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –≤ –ú–æ—Å–∫–≤—É)
    from utils.route_selector import RouteSelector
    all_routes = await RouteSelector.get_all_available_routes()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ—Ä–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if city_name not in all_routes:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    route_points = all_routes[city_name]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –º–∞—Ä—à—Ä—É—Ç–∞
    route_info_data = await RouteSelector.get_route_info(city_name, route_points)
    
    # –î–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ –ú–æ—Å–∫–≤—É –ø–æ–ª—É—á–∞–µ–º moscow_route_id
    moscow_route_id = None
    if route_info_data['action_type'] == 'delivery' and route_points:
        moscow_route_id = route_points[0].get('moscow_route_id')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –∏ –º–∞—Ä—à—Ä—É—Ç
    await state.update_data(
        selected_city=city_name,
        route_points=route_points,
        current_point_index=0,
        collected_containers={},
        completed_points=0,  # –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫
        route_type=route_info_data['action_type'],  # –¢–∏–ø –º–∞—Ä—à—Ä—É—Ç–∞: collection –∏–ª–∏ delivery
        moscow_route_id=moscow_route_id  # ID –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ú–æ—Å–∫–≤—É (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
    )
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.set_state(RouteStates.waiting_for_route_confirmation)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ
    if route_info_data['action_type'] == 'delivery':
        # –ú–∞—Ä—à—Ä—É—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ú–æ—Å–∫–≤—É
        route_info = f"üöö <b>–ú–∞—Ä—à—Ä—É—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: {route_info_data['route_name']}</b>\n\n"
        route_info += f"üì¶ <b>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ:</b> {route_info_data['total_containers']}\n"
        route_info += f"üìã <b>–¢–æ—á–µ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ ({len(route_points)}):</b>\n\n"
        
        for i, point in enumerate(route_points, 1):
            containers = point.get('containers_to_deliver', 0)
            route_info += f"{i}. <b>{point['organization']}</b>\n"
            route_info += f"   üì¶ –î–æ—Å—Ç–∞–≤–∏—Ç—å: {containers} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\n"
            route_info += f"   üìç {point['address']}\n\n"
        
        route_info += "üîÑ <b>–¢–∏–ø –º–∞—Ä—à—Ä—É—Ç–∞:</b> –î–æ—Å—Ç–∞–≤–∫–∞ (–æ—Ç–¥–∞—á–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤)\n\n"
    else:
        # –ú–∞—Ä—à—Ä—É—Ç —Å–±–æ—Ä–∞
        route_info = f"üì¶ <b>–í—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: {city_name}</b>\n\n"
        route_info += f"üìã <b>–¢–æ—á–∫–∏ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è ({len(route_points)}):</b>\n\n"
        
        for i, point in enumerate(route_points, 1):
            route_info += f"{i}. <b>{point['organization']}</b> - {point['name']}\n"
            route_info += f"   üìç {point['address']}\n\n"
        
        route_info += "üîÑ <b>–¢–∏–ø –º–∞—Ä—à—Ä—É—Ç–∞:</b> –°–±–æ—Ä (–ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤)\n\n"
    
    route_info += "‚ùì <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞:</b>"
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    from keyboards.user_keyboards import get_confirmation_keyboard
    
    await callback.message.edit_text(
        text=route_info,
        reply_markup=get_confirmation_keyboard(
            confirm_text="‚úÖ –ù–∞—á–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç",
            cancel_text="‚ùå –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥",
            confirm_callback="confirm_route_start",
            cancel_callback="back_to_city_selection"
        )
    )
    
    await callback.answer()

@user_router.callback_query(F.data == "confirm_route_start", RouteStates.waiting_for_route_confirmation)
async def confirm_route_start(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∞.
    
    –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞.
    """
    state_data = await state.get_data()
    selected_city = state_data.get('selected_city')
    route_points = state_data.get('route_points')
    
    if not route_points:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        await state.clear()
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
    from utils.route_session import generate_route_session_id
    route_session_id = generate_route_session_id(callback.from_user.id, selected_city)
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
    current_point = route_points[0]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(
        current_point=current_point,
        total_points=len(route_points),
        route_session_id=route_session_id
    )
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    await state.set_state(RouteStates.waiting_for_photo)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∞
    await state.update_data(route_start_time=datetime.now().isoformat())
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    point_info = format_route_progress(
        city=selected_city,
        current_point=current_point,
        total_points=len(route_points),
        current_index=0,
        collected_containers={},
        completed_points=0  # –ù–∞ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–µ –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
    )
    point_info += "\n\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–æ–π:"
    
    await callback.message.edit_text(
        text=point_info,
        reply_markup=get_point_action_keyboard()
    )
    
    await callback.answer("–ú–∞—Ä—à—Ä—É—Ç –Ω–∞—á–∞—Ç!")


@user_router.callback_query(F.data == "back_to_city_selection", RouteStates.waiting_for_route_confirmation)
async def back_to_city_selection(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞.
    
    –û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ —Å–Ω–æ–≤–∞.
    """
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    await state.set_state(RouteStates.waiting_for_city_selection)
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
    await state.update_data(
        selected_city=None,
        route_points=None,
        current_point=None
    )
    
    await callback.message.edit_text(
        text="üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞:",
        reply_markup=get_cities_keyboard()
    )
    
    await callback.answer("–í—ã–±–æ—Ä –æ—Ç–º–µ–Ω—ë–Ω")


@user_router.callback_query(F.data == "cancel_city_selection")
async def cancel_city_selection(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞.
    
    –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    
    Args:
        callback: –û–±—ä–µ–∫—Ç callback query –æ—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    await state.clear()
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await callback.message.edit_text(
        text="‚ùå –í—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç–º–µ–Ω—ë–Ω.",
        reply_markup=None
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )
    
    await callback.answer("–í—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç–º–µ–Ω—ë–Ω")



@user_router.callback_query(F.data == "cancel_route")
async def cancel_route(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞.
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –º–∞—Ä—à—Ä—É—Ç–∞.
    
    Args:
        callback: –û–±—ä–µ–∫—Ç callback query –æ—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –º–∞—Ä—à—Ä—É—Ç–∞
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    await callback.message.edit_text(
        text="‚ö†Ô∏è <b>–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç?</b>\n\n"
             "–í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω!",
        reply_markup=get_confirmation_keyboard(
            confirm_text="‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å",
            cancel_text="‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", 
            confirm_callback="confirm_cancel_route",
            cancel_callback="back_to_route"
        )
    )
    
    await callback.answer()


@user_router.callback_query(F.data == "confirm_cancel_route")
async def confirm_cancel_route(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –º–∞—Ä—à—Ä—É—Ç–∞.
    """
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    await callback.message.edit_text(
        text="‚úÖ –ú–∞—Ä—à—Ä—É—Ç –æ—Ç–º–µ–Ω—ë–Ω.",
        reply_markup=get_main_menu_keyboard()
    )
    
    await callback.answer("–ú–∞—Ä—à—Ä—É—Ç –æ—Ç–º–µ–Ω—ë–Ω")

@user_router.callback_query(F.data == "back_to_route")
async def back_to_route(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É.
    """
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    
    if current_point:
        point_info = (
            f"üìç <b>–¢–µ–∫—É—â–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞:</b>\n\n"
            f"üè¢ <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</b> {current_point['organization']}\n"
            f"üè† <b>–ê–¥—Ä–µ—Å:</b> {current_point['address']}\n\n"
            f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–æ–π:"
        )
        
        await callback.message.edit_text(
            text=point_info,
            reply_markup=get_point_action_keyboard()
        )
    else:
        await callback.message.edit_text(
            text="‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=None
        )
        
        await callback.message.answer(
            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )
    
    await callback.answer()

@user_router.message(F.photo, RouteStates.waiting_for_photo)
async def photo_received(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞.
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    
    if not current_point:
        await message.answer(ERROR_MESSAGES['route_not_selected'])
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (—Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞)
    photo: PhotoSize = message.photo[-1]
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    photos_list = state_data.get('photos_list', [])
    photos_list.append(photo.file_id)
    
    await state.update_data(photos_list=photos_list)
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∏
    await state.set_state(RouteStates.managing_point_data)
    
    await message.answer(
        f"üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—É—á–µ–Ω–∞! ({len(photos_list)} —à—Ç.)\n\n"
        f"üìç –¢–æ—á–∫–∞: <b>{current_point['name']}</b>\n"
        f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <b>{current_point['organization']}</b>\n\n"
        f"–¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ—á–∫–∏:",
        reply_markup=get_point_data_management_keyboard(
            has_photos=True,
            has_containers=False,
            has_comment=False,
            photos_count=len(photos_list),
            containers_count=None,
            comment_text=""
        )
    )


@user_router.callback_query(F.data == "add_more_photos", RouteStates.waiting_for_photo_decision)
async def add_more_photos(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ".
    
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.
    """
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    photos_list = state_data.get('photos_list', [])
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    await state.set_state(RouteStates.waiting_for_additional_photos)
    
    await callback.message.edit_text(
        f"üì∏ –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ({len(photos_list)} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ)\n\n"
        f"üìç –¢–æ—á–∫–∞: <b>{current_point['name']}</b>\n"
        f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <b>{current_point['organization']}</b>\n\n"
        f"üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'",
        reply_markup=get_finish_photos_keyboard(len(photos_list))
    )
    
    await callback.answer()


@user_router.callback_query(F.data == "proceed_to_boxes", RouteStates.waiting_for_photo_decision)
async def proceed_to_boxes(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤".
    
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.
    """
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    route_type = state_data.get('route_type', 'collection')
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    await state.set_state(RouteStates.waiting_for_containers_count)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–∞—Ä—à—Ä—É—Ç–∞
    if route_type == 'delivery':
        containers_to_deliver = current_point.get('containers_to_deliver', 0)
        point_name = current_point.get('point_name', current_point.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–æ—á–∫–∞'))
        message_text = (
            f"üì¶ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
            f"üìç –¢–æ—á–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: <b>{point_name}</b>\n"
            f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <b>{current_point['organization']}</b>\n\n"
            f"üöö <b>–£ –≤–∞—Å —Å —Å–æ–±–æ–π:</b> {containers_to_deliver} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\n\n"
            f"–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≥—Ä—É–∑–∏—Ç—å:\n"
            f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {MIN_CONTAINERS} –¥–æ {containers_to_deliver}:"
        )
    else:
        message_text = (
            f"üì¶ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
            f"üìç –¢–æ—á–∫–∞: <b>{current_point['name']}</b>\n"
            f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <b>{current_point['organization']}</b>\n\n"
            f"–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\n"
            f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {MIN_CONTAINERS} –¥–æ {MAX_CONTAINERS}:"
        )
    
    await callback.message.edit_text(message_text)
    await callback.answer()


@user_router.message(F.photo, RouteStates.waiting_for_additional_photos)
async def additional_photo_received(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    photos_list = state_data.get('photos_list', [])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    photo: PhotoSize = message.photo[-1]
    photos_list.append(photo.file_id)
    
    await state.update_data(photos_list=photos_list)
    
    await message.answer(
        f"üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞! ({len(photos_list)} –≤—Å–µ–≥–æ)\n\n"
        f"üìç –¢–æ—á–∫–∞: <b>{current_point['name']}</b>\n"
        f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <b>{current_point['organization']}</b>\n\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ",
        reply_markup=get_finish_photos_keyboard(len(photos_list))
    )


@user_router.callback_query(F.data == "add_one_more_photo", RouteStates.waiting_for_additional_photos)
async def add_one_more_photo(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ" –≤ —Ä–µ–∂–∏–º–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.
    """
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    photos_list = state_data.get('photos_list', [])
    
    await callback.message.edit_text(
        f"üì∏ –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ({len(photos_list)} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ)\n\n"
        f"üìç –¢–æ—á–∫–∞: <b>{current_point['name']}</b>\n"
        f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <b>{current_point['organization']}</b>\n\n"
        f"üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"
    )
    
    await callback.answer()


@user_router.callback_query(F.data == "finish_photos", RouteStates.waiting_for_additional_photos)
async def finish_photos(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ" - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∏.
    """
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    photos_list = state_data.get('photos_list', [])
    containers_count = state_data.get('containers_count', None)
    comment = state_data.get('comment', '')
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∏
    await state.set_state(RouteStates.managing_point_data)
    
    status_text = _get_point_status_text(state_data, current_point)
    
    await callback.message.edit_text(
        status_text,
        reply_markup=get_point_data_management_keyboard(
            has_photos=len(photos_list) > 0,
            has_containers=containers_count is not None,
            has_comment=bool(comment),
            photos_count=len(photos_list),
            containers_count=containers_count,
            comment_text=comment
        )
    )
    
    await callback.answer()


@user_router.message(F.text, RouteStates.waiting_for_containers_count)
async def containers_count_received(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å
    –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –º–∞—Ä—à—Ä—É—Ç–∞.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    try:
        containers_count = int(message.text.strip())
    except ValueError:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        await state.set_state(RouteStates.waiting_for_containers_count)
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–µ —Ç–µ–∫—Å—Ç)\n\n"
            f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç {MIN_CONTAINERS} –¥–æ {MAX_CONTAINERS}\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
    if containers_count < MIN_CONTAINERS or containers_count > MAX_CONTAINERS:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        await state.set_state(RouteStates.waiting_for_containers_count)
        await message.answer(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω!\n\n"
            f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç {MIN_CONTAINERS} –¥–æ {MAX_CONTAINERS}\n"
            f"–í—ã –≤–≤–µ–ª–∏: {containers_count}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    photos_list = state_data.get('photos_list', [])
    selected_city = state_data.get('selected_city')
    current_point_index = state_data.get('current_point_index', 0)
    total_points = state_data.get('total_points', 0)
    collected_containers = state_data.get('collected_containers', {})
    route_type = state_data.get('route_type', 'collection')  # collection –∏–ª–∏ delivery
    
    # –î–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å —Å–æ–±–æ–π
    if route_type == 'delivery':
        containers_to_deliver = current_point.get('containers_to_deliver', 0)
        if containers_count > containers_to_deliver:
            await state.set_state(RouteStates.waiting_for_containers_count)
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞: —É –≤–∞—Å —Å —Å–æ–±–æ–π —Ç–æ–ª—å–∫–æ {containers_to_deliver} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è {current_point['organization']}\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–¥–∞—Ç—å –º–∞–∫—Å–∏–º—É–º {containers_to_deliver} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\n"
                f"–í—ã –≤–≤–µ–ª–∏: {containers_count}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã–º–∏
    await state.update_data(containers_count=containers_count)
    await state.set_state(RouteStates.managing_point_data)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    state_data = await state.get_data()
    photos_list = state_data.get('photos_list', [])
    comment = state_data.get('comment', '')
    
    status_text = _get_point_status_text(state_data, current_point)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–∞—Ä—à—Ä—É—Ç–∞
    if route_type == 'delivery':
        success_message = f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {containers_count}\n\n"
    else:
        success_message = f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {containers_count}\n\n"
    
    await message.answer(
        success_message + status_text,
        reply_markup=get_point_data_management_keyboard(
            has_photos=len(photos_list) > 0,
            has_containers=True,
            has_comment=bool(comment),
            photos_count=len(photos_list),
            containers_count=containers_count,
            comment_text=comment
        )
    )


@user_router.message(F.text, RouteStates.waiting_for_comment)
async def comment_received(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —Ç–æ—á–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞.
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∏.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM  
        bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    comment = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    if len(comment) > 500:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        await state.set_state(RouteStates.waiting_for_comment)
        await message.answer(
            f"‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π!\n\n"
            f"üìù –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 500 —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"–£ –≤–∞—Å: {len(comment)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
            f"–°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    photos_list = state_data.get('photos_list', [])
    containers_count = state_data.get('containers_count', None)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(comment=comment)
    await state.set_state(RouteStates.managing_point_data)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    state_data = await state.get_data()
    
    status_text = _get_point_status_text(state_data, current_point)
    
    await message.answer(
        f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n" + status_text,
        reply_markup=get_point_data_management_keyboard(
            has_photos=len(photos_list) > 0,
            has_containers=containers_count is not None,
            has_comment=True,
            photos_count=len(photos_list),
            containers_count=containers_count,
            comment_text=comment
        )
    )


# ==============================================
# –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–ú–ò –¢–û–ß–ö–ò
# ==============================================

def _get_point_status_text(state_data: dict, current_point: dict) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ—á–∫–∏.
    """
    photos_list = state_data.get('photos_list', [])
    containers_count = state_data.get('containers_count', None)
    comment = state_data.get('comment', '')
    route_type = state_data.get('route_type', 'collection')
    
    # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –º–∞—Ä—à—Ä—É—Ç–∞
    if route_type == 'delivery':
        point_name = current_point.get('point_name', current_point.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–æ—á–∫–∞'))
        containers_to_deliver = current_point.get('containers_to_deliver', 0)
        status_text = f"üìç –¢–æ—á–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: <b>{point_name}</b>\n"
        status_text += f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <b>{current_point['organization']}</b>\n"
        status_text += f"üì¶ –ö –¥–æ—Å—Ç–∞–≤–∫–µ: {containers_to_deliver} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\n\n"
    else:
        status_text = f"üìç –¢–æ—á–∫–∞ —Å–±–æ—Ä–∞: <b>{current_point['name']}</b>\n"
        status_text += f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <b>{current_point['organization']}</b>\n\n"
    
    status_text += "üìä –°—Ç–∞—Ç—É—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:\n"
    status_text += f"üì∏ –§–æ—Ç–æ: {'‚úÖ' if photos_list else '‚ùå'} ({len(photos_list)} —à—Ç.)\n"
    
    if route_type == 'delivery':
        status_text += f"üì¶ –û—Ç–¥–∞–Ω–æ: {'‚úÖ' if containers_count is not None else '‚ùå'} ({containers_count if containers_count is not None else '‚Äî'} —à—Ç.)\n"
    else:
        status_text += f"üì¶ –°–æ–±—Ä–∞–Ω–æ: {'‚úÖ' if containers_count is not None else '‚ùå'} ({containers_count if containers_count is not None else '‚Äî'} —à—Ç.)\n"
    
    status_text += f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {'‚úÖ' if comment else '‚ùå'}\n\n"
    
    if photos_list and containers_count is not None and comment:
        if route_type == 'delivery':
            status_text += "üöÄ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã! –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É."
        else:
            status_text += "üöÄ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã! –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç."
    else:
        status_text += "‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
    
    return status_text


@user_router.callback_query(F.data == "add_photos", RouteStates.managing_point_data)
async def add_photos_from_management(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏.
    """
    await state.set_state(RouteStates.waiting_for_additional_photos)
    
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    photos_list = state_data.get('photos_list', [])
    
    await callback.message.edit_text(
        f"üì∏ –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ({len(photos_list)} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ)\n\n"
        f"üìç –¢–æ—á–∫–∞: <b>{current_point['name']}</b>\n"
        f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <b>{current_point['organization']}</b>\n\n"
        f"üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'",
        reply_markup=get_finish_photos_keyboard(len(photos_list))
    )
    
    await callback.answer()


@user_router.callback_query(F.data == "edit_photos", RouteStates.managing_point_data)
async def edit_photos_from_management(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏.
    """
    await state.set_state(RouteStates.waiting_for_additional_photos)
    
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    photos_list = state_data.get('photos_list', [])
    
    await callback.message.edit_text(
        f"üì∏ –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ({len(photos_list)} —à—Ç.)\n\n"
        f"üìç –¢–æ—á–∫–∞: <b>{current_point['name']}</b>\n"
        f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <b>{current_point['organization']}</b>\n\n"
        f"üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞",
        reply_markup=get_finish_photos_keyboard(len(photos_list))
    )
    
    await callback.answer()


@user_router.callback_query(F.data == "add_containers", RouteStates.managing_point_data)
async def add_containers_from_management(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏.
    """
    await state.set_state(RouteStates.waiting_for_containers_count)
    
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    route_type = state_data.get('route_type', 'collection')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–∞—Ä—à—Ä—É—Ç–∞
    if route_type == 'delivery':
        containers_to_deliver = current_point.get('containers_to_deliver', 0)
        point_name = current_point.get('point_name', current_point.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–æ—á–∫–∞'))
        message_text = (
            f"üì¶ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏\n\n"
            f"üìç –¢–æ—á–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: <b>{point_name}</b>\n"
            f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <b>{current_point['organization']}</b>\n\n"
            f"üöö <b>–£ –≤–∞—Å —Å —Å–æ–±–æ–π:</b> {containers_to_deliver} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {MIN_CONTAINERS} –¥–æ {containers_to_deliver}:"
        )
    else:
        message_text = (
            f"üì¶ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\n\n"
            f"üìç –¢–æ—á–∫–∞: <b>{current_point['name']}</b>\n"
            f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <b>{current_point['organization']}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {MIN_CONTAINERS} –¥–æ {MAX_CONTAINERS}:"
        )
    
    await callback.message.edit_text(message_text)
    await callback.answer()


@user_router.callback_query(F.data == "edit_containers", RouteStates.managing_point_data)
async def edit_containers_from_management(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏.
    """
    await state.set_state(RouteStates.waiting_for_containers_count)
    
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    current_containers = state_data.get('containers_count', None)
    route_type = state_data.get('route_type', 'collection')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–∞—Ä—à—Ä—É—Ç–∞
    if route_type == 'delivery':
        containers_to_deliver = current_point.get('containers_to_deliver', 0)
        point_name = current_point.get('point_name', current_point.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–æ—á–∫–∞'))
        message_text = (
            f"üì¶ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏\n\n"
            f"üìç –¢–æ—á–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: <b>{point_name}</b>\n"
            f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <b>{current_point['organization']}</b>\n\n"
            f"üöö <b>–£ –≤–∞—Å —Å —Å–æ–±–æ–π:</b> {containers_to_deliver} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\n"
            f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≥—Ä—É–∂–µ–Ω–æ: {current_containers if current_containers is not None else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –æ—Ç {MIN_CONTAINERS} –¥–æ {containers_to_deliver}:"
        )
    else:
        message_text = (
            f"üì¶ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\n\n"
            f"üìç –¢–æ—á–∫–∞: <b>{current_point['name']}</b>\n"
            f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <b>{current_point['organization']}</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {current_containers if current_containers is not None else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –æ—Ç {MIN_CONTAINERS} –¥–æ {MAX_CONTAINERS}:"
        )
    
    await callback.message.edit_text(message_text)
    await callback.answer()


@user_router.callback_query(F.data == "add_comment", RouteStates.managing_point_data)
async def add_comment_from_management(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏.
    """
    await state.set_state(RouteStates.waiting_for_comment)
    
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    
    await callback.message.edit_text(
        f"üìù –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç–æ—á–∫–µ\n\n"
        f"üìç –¢–æ—á–∫–∞: <b>{current_point['name']}</b>\n"
        f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <b>{current_point['organization']}</b>\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤):"
    )
    
    await callback.answer()


@user_router.callback_query(F.data == "edit_comment", RouteStates.managing_point_data)
async def edit_comment_from_management(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏.
    """
    await state.set_state(RouteStates.waiting_for_comment)
    
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    current_comment = state_data.get('comment', '')
    
    await callback.message.edit_text(
        f"üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\n\n"
        f"üìç –¢–æ—á–∫–∞: <b>{current_point['name']}</b>\n"
        f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <b>{current_point['organization']}</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {current_comment}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤):"
    )
    
    await callback.answer()


@user_router.callback_query(F.data == "continue_route", RouteStates.managing_point_data)
async def continue_route_from_management(callback: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç".
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—á–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–µ.
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    photos_list = state_data.get('photos_list', [])
    selected_city = state_data.get('selected_city')
    current_point_index = state_data.get('current_point_index', 0)
    total_points = state_data.get('total_points', 0)
    collected_containers = state_data.get('collected_containers', {})
    containers_count = state_data.get('containers_count', None)
    comment = state_data.get('comment', '')
    route_session_id = state_data.get('route_session_id')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    if not photos_list or containers_count is None or not comment:
        await callback.answer("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ!", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async for session in get_session():
        # –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ë–î
        stmt = select(Route).where(
            and_(
                Route.city_name == selected_city,
                Route.point_name == current_point['name'],
                Route.organization == current_point['organization']
            )
        )
        route_record = await session.scalar(stmt)
        
        if not route_record:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –º–∞—Ä—à—Ä—É—Ç–∞
            coords = current_point.get('coordinates', (None, None))
            lat, lon = coords if isinstance(coords, tuple) else (None, None)

            route_record = Route(
                city_name=selected_city,
                point_name=current_point['name'],
                address=current_point['address'],
                organization=current_point['organization'],
                latitude=lat,
                longitude=lon,
                order_index=current_point_index
            )
            session.add(route_record)
            await session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –±–µ–∑ –∫–æ–º–º–∏—Ç–∞
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress = RouteProgress(
            user_id=callback.from_user.id,
            route_id=route_record.id,
            route_session_id=route_session_id,
            containers_count=containers_count,
            notes=comment,
            status='completed'
        )
        session.add(progress)
        await session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        for index, photo_file_id in enumerate(photos_list, 1):
            photo_record = RoutePhoto(
                route_progress_id=progress.id,
                photo_file_id=photo_file_id,
                photo_order=index
            )
            session.add(photo_record)
        
        await session.commit()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º
    org = current_point['organization']
    collected_containers[org] = collected_containers.get(org, 0) + containers_count
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫
    completed_points = state_data.get('completed_points', 0) + 1
    
    await state.update_data(
        collected_containers=collected_containers,
        completed_points=completed_points
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â—ë —Ç–æ—á–∫–∏ –≤ –º–∞—Ä—à—Ä—É—Ç–µ
    next_point_index = current_point_index + 1
    
    if next_point_index < total_points:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–µ  
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º route_points –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∞ –Ω–µ AVAILABLE_ROUTES
        route_points = state_data.get('route_points', [])
        if next_point_index < len(route_points):
            next_point = route_points[next_point_index]
        else:
            logger.error(f"next_point_index {next_point_index} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ {len(route_points)}")
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞")
            return
        
        await state.update_data(
            current_point=next_point,
            current_point_index=next_point_index,
            photos_list=[],  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –Ω–æ–≤–æ–π —Ç–æ—á–∫–∏
            containers_count=None,  # –û—á–∏—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è –Ω–æ–≤–æ–π —Ç–æ—á–∫–∏
            comment=""  # –û—á–∏—â–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –Ω–æ–≤–æ–π —Ç–æ—á–∫–∏
        )
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–∏
        await state.set_state(RouteStates.waiting_for_photo)
        
        point_info = format_route_progress(
            city=selected_city,
            current_point=next_point,
            total_points=total_points,
            current_index=next_point_index,
            collected_containers=collected_containers,
            completed_points=completed_points  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫
        )
        point_info = f"‚úÖ –¢–æ—á–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ–±—Ä–∞–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {containers_count}, —Ñ–æ—Ç–æ: {len(photos_list)}\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n{point_info}\n\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–æ–π:"
        
        await callback.message.answer(
            text=point_info,
            reply_markup=get_point_action_keyboard()
        )
        
    else:
        # –í—Å–µ —Ç–æ—á–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –º–∞—Ä—à—Ä—É—Ç–∞
        await state.set_state(RouteStates.waiting_for_route_completion)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –º–∞—Ä—à—Ä—É—Ç–∞
        route_type = state_data.get('route_type', 'collection')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –ø–æ –º–∞—Ä—à—Ä—É—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if route_type == 'delivery':
            # –î–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ú–æ—Å–∫–≤—É
            summary = f"üéâ <b>–í—Å–µ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!</b>\n\n"
            summary += f"‚úÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_points} –∏–∑ {total_points} —Ç–æ—á–µ–∫</b>\n"
            summary += f"üìä <b>–°–≤–æ–¥–∫–∞ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ:</b>\n"
            
            total_delivered = 0
            for organization, count in collected_containers.items():
                summary += f"‚Ä¢ {organization}: {count} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\n"
                total_delivered += count
            
            summary += f"\nüì¶ <b>–í—Å–µ–≥–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:</b> {total_delivered} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\n\n"
            summary += f"üìù <b>–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>"
        else:
            # –î–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–±–æ—Ä–∞
            summary = f"üéâ <b>–í—Å–µ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω—ã!</b>\n\n"
            summary += f"‚úÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_points} –∏–∑ {total_points} —Ç–æ—á–µ–∫</b>\n"
            summary += f"üìä <b>–°–≤–æ–¥–∫–∞ –ø–æ —Å–±–æ—Ä—É:</b>\n"
            
            total_collected = 0
            for organization, count in collected_containers.items():
                summary += f"‚Ä¢ {organization}: {count} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\n"
                total_collected += count
            
            summary += f"\nüì¶ <b>–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ:</b> {total_collected} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        
        await callback.message.answer(
            text=summary,
            reply_markup=get_complete_route_keyboard(route_type)
        )
    
    await callback.answer()


@user_router.callback_query(F.data == "start_lab_summaries", RouteStates.waiting_for_route_completion)
async def start_lab_summaries(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∏—Ç–æ–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è–º.
    
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ä—à—Ä—É—Ç, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç
    –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
    
    Args:
        callback: –û–±—ä–µ–∫—Ç callback query
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    state_data = await state.get_data()
    route_session_id = state_data.get('route_session_id')
    selected_city = state_data.get('selected_city')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π
    route_points = AVAILABLE_ROUTES.get(selected_city, [])
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    organizations = {}
    for point in route_points:
        org = point['organization']
        if org not in organizations:
            organizations[org] = {'points_count': 0}
        organizations[org]['points_count'] += 1
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –ë–î —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π, –≥–¥–µ –µ—Å—Ç—å –ù–ï –ü–†–û–ü–£–©–ï–ù–ù–´–ï —Ç–æ—á–∫–∏
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
        route_progresses = await session.scalars(
            select(RouteProgress).options(
                selectinload(RouteProgress.route)
            ).where(
                RouteProgress.route_session_id == route_session_id,
                RouteProgress.user_id == callback.from_user.id
            )
        )
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ù–ï –ø—Ä–æ–ø—É—â–µ–Ω–Ω–∞—è —Ç–æ—á–∫–∞
        organizations_with_processed_points = {}
        for progress in route_progresses:
            org = progress.route.organization
            # –ï—Å–ª–∏ —Ç–æ—á–∫–∞ –ù–ï –ø—Ä–æ–ø—É—â–µ–Ω–∞ (completed –∏–ª–∏ pending), –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
            if hasattr(progress, 'status') and progress.status != 'skipped':
                organizations_with_processed_points[org] = True
            elif not hasattr(progress, 'status'):  # –°—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –±–µ–∑ –ø–æ–ª—è status —Å—á–∏—Ç–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏
                organizations_with_processed_points[org] = True
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
        for organization in organizations_with_processed_points.keys():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
            existing = await session.scalar(
                select(LabSummary).where(
                    LabSummary.route_session_id == route_session_id,
                    LabSummary.organization == organization,
                    LabSummary.user_id == callback.from_user.id
                )
            )
            
            if not existing:
                lab_summary = LabSummary(
                    user_id=callback.from_user.id,
                    route_session_id=route_session_id,
                    organization=organization,
                    is_completed=False
                )
                session.add(lab_summary)
        
        await session.commit()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    async for session in get_session():
        lab_summaries = await session.scalars(
            select(LabSummary).where(
                LabSummary.route_session_id == route_session_id,
                LabSummary.user_id == callback.from_user.id
            )
        )
        lab_summaries_list = lab_summaries.all()
    
    if not lab_summaries_list:
        # –ù–µ—Ç –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (–≤—Å–µ —Ç–æ—á–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã), —Å—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∞–µ–º –º–∞—Ä—à—Ä—É—Ç
        await complete_route_final(callback, state)
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
    await state.set_state(RouteStates.selecting_lab_for_summary)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π
    await show_lab_selection(callback, state)


async def show_lab_selection(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""
    state_data = await state.get_data()
    route_session_id = state_data.get('route_session_id')
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
        stmt = select(LabSummary).options(
            selectinload(LabSummary.summary_photos)
        ).where(
            LabSummary.route_session_id == route_session_id,
            LabSummary.user_id == callback.from_user.id
        )
        
        labs = await session.scalars(stmt)
        labs_list = labs.all()
        
        if not labs_list:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è–º",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        labs_data = []
        for lab in labs_list:
            labs_data.append({
                'organization': lab.organization,
                'is_completed': lab.is_completed,
                'points_count': len([p for p in AVAILABLE_ROUTES.get(state_data.get('selected_city', ''), []) 
                                   if p['organization'] == lab.organization])
            })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        completed_count = sum(1 for lab in labs_data if lab['is_completed'])
        total_count = len(labs_data)
        
        message = f"üè• <b>–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è–º</b>\n\n"
        message += f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {completed_count}/{total_count} –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π\n\n"
        message += "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:\n\n"
        message += "‚è≥ - –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ\n‚úÖ - –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
        
        await callback.message.edit_text(
            text=message,
            reply_markup=get_lab_selection_keyboard(labs_data)
        )
    
    await callback.answer()


# ==============================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ú–ê–†–®–†–£–¢–û–í –í –ú–û–°–ö–í–£
# ==============================================

@user_router.callback_query(F.data == "add_final_comment_moscow", RouteStates.waiting_for_route_completion)
async def add_final_comment_moscow(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ú–æ—Å–∫–≤—É.
    """
    await state.set_state(RouteStates.waiting_for_moscow_final_comment)
    
    state_data = await state.get_data()
    collected_containers = state_data.get('collected_containers', {})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    summary_text = "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è</b>\n\n"
    summary_text += "üìä <b>–°–≤–æ–¥–∫–∞ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ:</b>\n"
    
    total_delivered = 0
    for organization, count in collected_containers.items():
        summary_text += f"‚Ä¢ {organization}: {count} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\n"
        total_delivered += count
    
    summary_text += f"\nüì¶ <b>–í—Å–µ–≥–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:</b> {total_delivered} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\n\n"
    summary_text += "üí¨ <b>–ù–∞–ø–∏—à–∏—Ç–µ –∏—Ç–æ–≥–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –º–∞—Ä—à—Ä—É—Ç–∞:</b>\n"
    summary_text += "(–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ, –º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)"
    
    await callback.message.edit_text(summary_text)
    await callback.answer()


@user_router.message(F.text, RouteStates.waiting_for_moscow_final_comment)
async def moscow_final_comment_received(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ú–æ—Å–∫–≤—É.
    """
    final_comment = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    if len(final_comment) > 500:
        await message.answer(
            "‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π!\n\n"
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 500 —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {len(final_comment)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç:"
        )
        return
    
    if not final_comment:
        await message.answer(
            "‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –∏—Ç–æ–≥–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –º–∞—Ä—à—Ä—É—Ç–∞:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(moscow_final_comment=final_comment)
    
    state_data = await state.get_data()
    collected_containers = state_data.get('collected_containers', {})
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirmation_text = "‚úÖ <b>–ò—Ç–æ–≥–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
    confirmation_text += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {final_comment}\n\n"
    
    confirmation_text += "üìä <b>–°–≤–æ–¥–∫–∞ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ:</b>\n"
    total_delivered = 0
    for organization, count in collected_containers.items():
        confirmation_text += f"‚Ä¢ {organization}: {count} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\n"
        total_delivered += count
    
    confirmation_text += f"\nüì¶ <b>–í—Å–µ–≥–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:</b> {total_delivered} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\n\n"
    confirmation_text += "üéØ <b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞</b>"
    
    await message.answer(
        confirmation_text,
        reply_markup=get_moscow_final_comment_keyboard()
    )


@user_router.callback_query(F.data == "complete_moscow_route_final", RouteStates.waiting_for_moscow_final_comment)
async def complete_moscow_route_final(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ú–æ—Å–∫–≤—É —Å –∏—Ç–æ–≥–æ–≤—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º.
    """
    state_data = await state.get_data()
    moscow_final_comment = state_data.get('moscow_final_comment', '')
    collected_containers = state_data.get('collected_containers', {})
    moscow_route_id = state_data.get('moscow_route_id')
    
    if not moscow_final_comment:
        await callback.answer("‚ùå –ò—Ç–æ–≥–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ú–æ—Å–∫–≤—É
    route_session_id = state_data.get('route_session_id')
    
    async for session in get_session():
        # –°–æ–∑–¥–∞—ë–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å —Å –∏—Ç–æ–≥–æ–≤—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
        final_comment_progress = RouteProgress(
            user_id=callback.from_user.id,
            route_id=1,  # –§–∏–∫—Ç–∏–≤–Ω—ã–π ID –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            route_session_id=route_session_id,
            containers_count=0,  # –ù–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—á–∫–µ
            notes=f"–ò–¢–û–ì–û–í–´–ô_–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô_–ú–û–°–ö–í–ê: {moscow_final_comment}",
            status='completed'
        )
        session.add(final_comment_progress)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ú–æ—Å–∫–≤—É –Ω–∞ 'completed'
        if moscow_route_id:
            moscow_route = await session.get(MoscowRoute, moscow_route_id)
            if moscow_route:
                moscow_route.status = 'completed'
                moscow_route.courier_id = callback.from_user.id
                moscow_route.completed_at = datetime.now()
                logger.info(f"–ú–∞—Ä—à—Ä—É—Ç –≤ –ú–æ—Å–∫–≤—É {moscow_route_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –¥–æ—Å—Ç–∞–≤–æ–∫ —Å 'in_progress' –Ω–∞ 'completed'
                in_progress_deliveries = await session.scalars(
                    select(Delivery).where(Delivery.status == 'in_progress')
                )
                in_progress_list = in_progress_deliveries.all()
                
                completed_count = 0
                for delivery in in_progress_list:
                    delivery.status = 'completed'
                    delivery.delivered_at = datetime.now()
                    completed_count += 1
                
                logger.info(f"–í—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏ in_progress –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ completed: {completed_count} —à—Ç.")
                
            else:
                logger.warning(f"–ú–∞—Ä—à—Ä—É—Ç –≤ –ú–æ—Å–∫–≤—É —Å ID {moscow_route_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            logger.warning("moscow_route_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        await session.commit()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    completion_message = "üéâ <b>–ú–∞—Ä—à—Ä—É—Ç –≤ –ú–æ—Å–∫–≤—É —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
    completion_message += "üìä <b>–ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞:</b>\n"
    
    total_delivered = 0
    for organization, count in collected_containers.items():
        completion_message += f"‚Ä¢ {organization}: {count} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\n"
        total_delivered += count
    
    completion_message += f"\nüì¶ <b>–í—Å–µ–≥–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:</b> {total_delivered} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\n"
    completion_message += f"üí¨ <b>–ò—Ç–æ–≥–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {moscow_final_comment}\n\n"
    completion_message += "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ\n"
    completion_message += "üè† –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞"
    
    await callback.message.edit_text(
        completion_message,
        reply_markup=None
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.answer(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard()
    )
    
    await callback.answer("üéâ –ú–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")


async def get_user_routes_with_pagination(user_id: int, limit: int = 10, offset: int = 0):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        offset: –°–¥–≤–∏–≥ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        
    Returns:
        tuple: (routes_data, has_more, total_count)
    """
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –£–ë–´–í–ê–ù–ò–Æ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É, —Å—Ç–∞—Ä—ã–µ —Å–Ω–∏–∑—É)
        stmt = select(RouteProgress).options(
            selectinload(RouteProgress.route),
            selectinload(RouteProgress.photos)
        ).where(
            RouteProgress.user_id == user_id
        ).order_by(RouteProgress.visited_at.desc())  # –ù–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã —Å–≤–µ—Ä—Ö—É
        
        routes = await session.scalars(stmt)
        routes_list = routes.all()
        
        if not routes_list:
            return [], False, 0
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ route_session_id
        routes_summary = {}
        for route_progress in routes_list:
            session_id = route_progress.route_session_id
            date = route_progress.visited_at.strftime("%d.%m.%Y")
            city = route_progress.route.city_name
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º session_id –∫–∞–∫ –∫–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            if session_id not in routes_summary:
                # –ù–∞—Ö–æ–¥–∏–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏ —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
                first_time = min(p.visited_at for p in routes_list if p.route_session_id == session_id)
                time_start = first_time.strftime("%H:%M")
                
                routes_summary[session_id] = {
                    'route_id': session_id,
                    'date': date,
                    'city': city,
                    'time_start': time_start,
                    'first_time': first_time,  # –î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                    'progresses': []
                }
            
            routes_summary[session_id]['progresses'].append(route_progress)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –≤ –∫–∞–∂–¥–æ–º –º–∞—Ä—à—Ä—É—Ç–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        for route_info in routes_summary.values():
            route_info['progresses'].sort(key=lambda x: x.visited_at)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∞–º–∏ –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        sorted_routes = sorted(routes_summary.values(), key=lambda x: x['first_time'], reverse=True)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        total_count = len(sorted_routes)
        paginated_routes = sorted_routes[offset:offset + limit]
        has_more = offset + limit < total_count
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        routes_data = []
        for route_info in paginated_routes:
            progresses = route_info['progresses']
            total_containers = sum(p.containers_count for p in progresses)
            points_count = len(progresses)
            
            routes_data.append({
                'route_id': route_info['route_id'],
                'date': route_info['date'],
                'city': route_info['city'],
                'points_count': points_count,
                'total_containers': total_containers
            })
        
        return routes_data, has_more, total_count


@user_router.message(F.text == "üìä –ú–æ–∏ –º–∞—Ä—à—Ä—É—Ç—ã")
async def my_routes(message: Message) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ route_session_id.
    –¢–µ–ø–µ—Ä—å —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π: —Å–≤–µ—Ä—Ö—É –Ω–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã, —Å–Ω–∏–∑—É —Å—Ç–∞—Ä—ã–µ –ø–æ –∫–Ω–æ–ø–∫–µ "–µ—â–µ".
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    routes_data, has_more, total_count = await get_user_routes_with_pagination(message.from_user.id, limit=10, offset=0)
    
    if not routes_data:
        await message.answer(
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    response = f"üìä <b>–í–∞—à–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:</b>\n\n"
    response += f"–ü–æ–∫–∞–∑–∞–Ω–æ: {len(routes_data)} –∏–∑ {total_count}\n"
    response += "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n"
    response += "\nüÜï <i>–ù–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã</i>"
    if has_more:
        response += "\n‚¨áÔ∏è <i>–°—Ç–∞—Ä—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã (–Ω–∞–∂–º–∏—Ç–µ '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ')</i>"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        text=response,
        reply_markup=get_route_selection_keyboard(routes_data, has_more, 0)
    )


@user_router.callback_query(F.data.startswith("load_more_routes:"))
async def load_more_routes(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ" –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤.
    
    Args:
        callback: –û–±—ä–µ–∫—Ç callback query
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º offset –∏–∑ callback_data
    offset = int(callback.data.split(":", 1)[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
    routes_data, has_more, total_count = await get_user_routes_with_pagination(
        callback.from_user.id, limit=10, offset=offset
    )
    
    if not routes_data:
        await callback.answer("–ë–æ–ª—å—à–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–µ—Ç", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    response = f"üìä <b>–í–∞—à–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:</b>\n\n"
    response += f"–ü–æ–∫–∞–∑–∞–Ω–æ: {offset + len(routes_data)} –∏–∑ {total_count}\n"
    response += "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n"
    response += "\nüÜï <i>–ù–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã</i>"
    if has_more:
        response += "\n‚¨áÔ∏è <i>–°—Ç–∞—Ä—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã (–Ω–∞–∂–º–∏—Ç–µ '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ')</i>"
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    await callback.message.edit_text(
        text=response,
        reply_markup=get_route_selection_keyboard(routes_data, has_more, offset)
    )
    
    await callback.answer(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –µ—â–µ {len(routes_data)} –º–∞—Ä—à—Ä—É—Ç–æ–≤")


# ==============================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê –ò–°–¢–û–†–ò–ò –ú–ê–†–®–†–£–¢–û–í
# ==============================================

@user_router.callback_query(F.data.startswith("r:"))
async def view_route_details(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
    """
    callback_data = parse_callback(callback.data)
    if not callback_data or callback_data.get('action') != 'view_route':
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    
    session_id = callback_data['route_id']
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ session_id
        stmt = select(RouteProgress).options(
            selectinload(RouteProgress.route),
            selectinload(RouteProgress.photos)
        ).where(
            RouteProgress.route_session_id == session_id
        ).order_by(RouteProgress.visited_at)
        
        progresses = await session.scalars(stmt)
        progresses_list = progresses.all()
        
        if not progresses_list:
            await callback.answer("‚ùå –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞
        await show_route_point_details(callback, progresses_list, 0, session_id)
    
    await callback.answer()


async def show_route_point_details(
    callback: CallbackQuery, 
    progresses_list: list, 
    point_index: int, 
    route_id: str
) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞.
    """
    if point_index >= len(progresses_list):
        await callback.answer("‚ùå –¢–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    progress = progresses_list[point_index]
    route = progress.route
    photos = progress.photos
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ —Ç–æ—á–∫–∏
    message_text = f"üìç <b>–¢–æ—á–∫–∞ {point_index + 1} –∏–∑ {len(progresses_list)}</b>\n\n"
    message_text += f"üè¢ <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</b> {route.organization}\n"
    message_text += f"üìç <b>–ê–¥—Ä–µ—Å:</b> {route.address}\n"
    message_text += f"üì¶ <b>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å–æ–±—Ä–∞–Ω–æ:</b> {progress.containers_count}\n"
    message_text += f"üìÖ <b>–î–∞—Ç–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è:</b> {progress.visited_at.strftime('%d.%m.%Y %H:%M')}\n"
    
    if progress.notes:
        message_text += f"\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {progress.notes}\n"
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ —Ç–æ—á–∫–∏
    if hasattr(progress, 'status') and progress.status == 'skipped':
        message_text += f"\n\n‚è≠Ô∏è <b>–°—Ç–∞—Ç—É—Å:</b> –ü—Ä–æ–ø—É—â–µ–Ω–∞\n"
        message_text += f"üì∏ <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:</b> –Ω–µ—Ç (—Ç–æ—á–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞)"
    else:
        if photos:
            message_text += f"\nüì∏ <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:</b> {len(photos)} —à—Ç."
        else:
            message_text += f"\nüì∏ <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:</b> –Ω–µ—Ç"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Ç–æ–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è–º –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
    async for session in get_session():
        lab_summaries = await session.scalars(
            select(LabSummary).options(
                selectinload(LabSummary.summary_photos)
            ).where(
                LabSummary.route_session_id == route_id,
                LabSummary.user_id == callback.from_user.id
            )
        )
        lab_summaries_list = lab_summaries.all()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
    has_lab_data = len(lab_summaries_list) > 0
    if has_lab_data:
        completed_labs = sum(1 for lab in lab_summaries_list if lab.is_completed)
        total_labs = len(lab_summaries_list)
        message_text += f"\n\nüè• <b>–ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è–º:</b> {completed_labs}/{total_labs}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_route_detail_keyboard(
        route_id=route_id,
        current_point_index=point_index,
        total_points=len(progresses_list),
        has_photos=len(photos) > 0,
        has_lab_data=has_lab_data
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if callback.message.photo:
        # –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            text=message_text,
            reply_markup=keyboard
        )
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
        await callback.message.edit_text(
            text=message_text,
            reply_markup=keyboard
        )


@user_router.callback_query(F.data.startswith("rp:"))
async def navigate_route_point(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ç–æ—á–∫–∞–º –º–∞—Ä—à—Ä—É—Ç–∞.
    """
    callback_data = parse_callback(callback.data)
    if not callback_data or callback_data.get('action') != 'route_point':
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    
    session_id = callback_data['route_id']
    point_index = callback_data['point_index']
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ session_id
        stmt = select(RouteProgress).options(
            selectinload(RouteProgress.route),
            selectinload(RouteProgress.photos)
        ).where(
            RouteProgress.route_session_id == session_id
        ).order_by(RouteProgress.visited_at)
        
        progresses = await session.scalars(stmt)
        progresses_list = progresses.all()
        
        if not progresses_list:
            await callback.answer("‚ùå –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–æ—á–∫—É
        await show_route_point_details(callback, progresses_list, point_index, session_id)
    
    await callback.answer()


@user_router.callback_query(F.data.startswith("view_photos:"))
async def view_route_photos(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞.
    """
    parts = callback.data.split(":")
    if len(parts) != 3:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    session_id = parts[1]
    point_index = int(parts[2])
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ session_id
        stmt = select(RouteProgress).options(
            selectinload(RouteProgress.route),
            selectinload(RouteProgress.photos)
        ).where(
            RouteProgress.route_session_id == session_id
        ).order_by(RouteProgress.visited_at)
        
        progresses = await session.scalars(stmt)
        progresses_list = progresses.all()
        
        if not progresses_list:
            await callback.answer("‚ùå –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        if point_index >= len(progresses_list):
            await callback.answer("‚ùå –¢–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        progress = progresses_list[point_index]
        photos = progress.photos
        
        if not photos:
            await callback.answer("‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ—Ç", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        await show_route_photo(callback, photos, 0, session_id, point_index)
    
    await callback.answer()


async def show_route_photo(
    callback: CallbackQuery, 
    photos: list, 
    photo_index: int, 
    route_id: str, 
    point_index: int
) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞.
    """
    if photo_index >= len(photos):
        await callback.answer("‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    photo = photos[photo_index]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º
    keyboard = get_photos_viewer_keyboard(
        route_id=route_id,
        point_index=point_index,
        current_photo_index=photo_index,
        total_photos=len(photos)
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –ø–æ–¥–ø–∏—Å—å—é
    caption = f"üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è {photo_index + 1} –∏–∑ {len(photos)}"
    
    await callback.message.answer_photo(
        photo=photo.photo_file_id,
        caption=caption,
        reply_markup=keyboard
    )


@user_router.callback_query(F.data.startswith("p:"))
async def navigate_route_photo(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞.
    """
    callback_data = parse_callback(callback.data)
    if not callback_data or callback_data.get('action') != 'view_photo':
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    
    session_id = callback_data['route_id']
    point_index = callback_data['point_index']
    photo_index = callback_data['photo_index']
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ session_id
        stmt = select(RouteProgress).options(
            selectinload(RouteProgress.photos)
        ).where(
            RouteProgress.route_session_id == session_id
        ).order_by(RouteProgress.visited_at)
        
        progresses = await session.scalars(stmt)
        progresses_list = progresses.all()
        
        if not progresses_list:
            await callback.answer("‚ùå –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        if point_index >= len(progresses_list):
            await callback.answer("‚ùå –¢–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        progress = progresses_list[point_index]
        photos = progress.photos
        
        if not photos:
            await callback.answer("‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ—Ç", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        await show_route_photo(callback, photos, photo_index, session_id, point_index)
    
    await callback.answer()


@user_router.callback_query(F.data == "back_to_routes")
async def back_to_routes(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –º–∞—Ä—à—Ä—É—Ç–æ–≤.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    routes_data, has_more, total_count = await get_user_routes_with_pagination(
        callback.from_user.id, limit=10, offset=0
    )
    
    if not routes_data:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ–º
        if callback.message.photo:
            await callback.message.answer(
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await callback.message.edit_text(
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤",
                reply_markup=get_main_menu_keyboard()
            )
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    response = f"üìä <b>–í–∞—à–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:</b>\n\n"
    response += f"–ü–æ–∫–∞–∑–∞–Ω–æ: {len(routes_data)} –∏–∑ {total_count}\n"
    response += "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n"
    response += "\nüÜï <i>–ù–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã</i>"
    if has_more:
        response += "\n‚¨áÔ∏è <i>–°—Ç–∞—Ä—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã (–Ω–∞–∂–º–∏—Ç–µ '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ')</i>"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if callback.message.photo:
        # –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            text=response,
            reply_markup=get_route_selection_keyboard(routes_data, has_more, 0)
        )
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
        await callback.message.edit_text(
            text=response,
            reply_markup=get_route_selection_keyboard(routes_data, has_more, 0)
        )
    
    await callback.answer()


@user_router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ ReplyKeyboardMarkup –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å edit_text
    await callback.message.answer(
        text="üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )
    
    await callback.answer()


# ==============================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –õ–ê–ë–û–†–ê–¢–û–†–ò–Ø–ú–ò
# ==============================================

@user_router.callback_query(F.data.startswith("select_lab:"), RouteStates.selecting_lab_for_summary)
async def select_lab_for_summary(callback: CallbackQuery, state: FSMContext) -> None:
    """–í—ã–±–æ—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    organization = callback.data.split(":", 1)[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_lab_organization=organization)
    await state.set_state(RouteStates.managing_lab_summary)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
    await show_lab_summary_management(callback, state, organization)


async def show_lab_summary_management(callback: CallbackQuery, state: FSMContext, organization: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏."""
    state_data = await state.get_data()
    route_session_id = state_data.get('route_session_id')
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
        lab_summary = await session.scalar(
            select(LabSummary).options(
                selectinload(LabSummary.summary_photos)
            ).where(
                LabSummary.route_session_id == route_session_id,
                LabSummary.organization == organization,
                LabSummary.user_id == callback.from_user.id
            )
        )
        
        if not lab_summary:
            await callback.answer("–û—à–∏–±–∫–∞: –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        photos_count = len(lab_summary.summary_photos)
        has_photos = photos_count > 0
        has_comment = bool(lab_summary.summary_comment)
        comment_text = lab_summary.summary_comment or ""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üè• <b>–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è: {organization}</b>\n\n"
        
        if has_photos:
            message += f"üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {photos_count} ‚úÖ\n"
        else:
            message += f"üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã ‚è≥\n"
        
        if has_comment:
            comment_preview = comment_text[:50] + "..." if len(comment_text) > 50 else comment_text
            message += f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment_preview} ‚úÖ\n"
        else:
            message += f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
        
        message += f"\n{'‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é' if has_photos else '‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã 1 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é'}"
        
        await callback.message.edit_text(
            text=message,
            reply_markup=get_lab_summary_management_keyboard(
                has_photos=has_photos,
                has_comment=has_comment,
                photos_count=photos_count,
                comment_text=comment_text,
                organization=organization
            )
        )
    
    await callback.answer()


@user_router.callback_query(F.data == "complete_route_final", RouteStates.selecting_lab_for_summary)
async def complete_route_final(callback: CallbackQuery, state: FSMContext) -> None:
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π."""
    state_data = await state.get_data()
    collected_containers = state_data.get('collected_containers', {})
    selected_city = state_data.get('selected_city')
    
    # –°–æ–∑–¥–∞—ë–º –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    async for session in get_session():
        for organization, containers_count in collected_containers.items():
            if containers_count > 0:
                delivery_address = MOSCOW_DELIVERY_ADDRESSES.get(organization, {})
                
                delivery = Delivery(
                    organization=organization,
                    total_containers=containers_count,
                    delivery_address=delivery_address.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                    contact_info=delivery_address.get('contact', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                    status='pending'
                )
                session.add(delivery)
        
        await session.commit()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
    route_start_time = datetime.fromisoformat(state_data.get('route_start_time'))
    route_end_time = datetime.now()
    total_time = route_end_time - route_start_time
    
    hours = total_time.seconds // 3600
    minutes = (total_time.seconds % 3600) // 60
    time_str = f"{hours}—á {minutes}–º–∏–Ω"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–∞–º–∏
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∞ –Ω–µ AVAILABLE_ROUTES
    route_points = state_data.get('route_points', [])
    completion_message = format_route_summary(
        city=selected_city,
        total_points=len(route_points),
        collected_containers=collected_containers,
        total_time=time_str
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
    has_containers = any(count > 0 for count in collected_containers.values())
    
    if has_containers:
        completion_message += "\n\nüè• <b>–ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è–º –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!</b>\n"
        completion_message += "\nüìã –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –≤ –ú–æ—Å–∫–≤—É:\n"
    else:
        completion_message += "\n\n‚ö†Ô∏è <b>–í—Å–µ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –±—ã–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã!</b>\n"
        completion_message += "\nüìã –ù–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ú–æ—Å–∫–≤—É.\n"
    
    if has_containers:
        for organization, containers_count in collected_containers.items():
            if containers_count > 0:
                address = MOSCOW_DELIVERY_ADDRESSES.get(organization, {}).get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')
                completion_message += f"\nüì¶ <b>{organization}:</b> {containers_count} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\n"
                completion_message += f"üè† –ê–¥—Ä–µ—Å: {address}"
        
        completion_message += "\n\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ."
    else:
        completion_message += "\n–ú–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –Ω–∏–∫–∞–∫–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –Ω–µ –±—ã–ª–æ —Å–æ–±—Ä–∞–Ω–æ."
    
    await callback.message.edit_text(
        text=completion_message,
        reply_markup=None
    )
    
    await callback.message.answer(
        "üéâ <b>–ú–∞—Ä—à—Ä—É—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ª–∏—á–Ω—É—é —Ä–∞–±–æ—Ç—É!",
        reply_markup=get_main_menu_keyboard()
    )
    
    await callback.answer("–ú–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")


@user_router.callback_query(F.data == "add_lab_photos", RouteStates.managing_lab_summary)
async def add_lab_photos(callback: CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏."""
    await state.set_state(RouteStates.waiting_for_lab_summary_photos)
    
    await callback.message.edit_text(
        text="üì∏ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏</b>\n\n"
             "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ (–æ—Ç 1 –¥–æ 10 —Ñ–æ—Ç–æ).\n"
             "–≠—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–±—â–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–º–µ—â–µ–Ω–∏—è, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –≤–∞–∂–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π.",
        reply_markup=get_lab_photos_keyboard(0)
    )
    
    await callback.answer()


@user_router.callback_query(F.data == "edit_lab_photos", RouteStates.managing_lab_summary)
async def edit_lab_photos(callback: CallbackQuery, state: FSMContext) -> None:
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏."""
    state_data = await state.get_data()
    route_session_id = state_data.get('route_session_id')
    organization = state_data.get('selected_lab_organization')
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        lab_summary = await session.scalar(
            select(LabSummary).options(
                selectinload(LabSummary.summary_photos)
            ).where(
                LabSummary.route_session_id == route_session_id,
                LabSummary.organization == organization,
                LabSummary.user_id == callback.from_user.id
            )
        )
        
        if lab_summary:
            photos_count = len(lab_summary.summary_photos)
            await state.set_state(RouteStates.waiting_for_lab_summary_photos)
            
            await callback.message.edit_text(
                text=f"üì∏ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏</b>\n\n"
                     f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {photos_count}\n"
                     f"–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.",
                reply_markup=get_lab_photos_keyboard(photos_count)
            )
    
    await callback.answer()


@user_router.message(F.photo, RouteStates.waiting_for_lab_summary_photos)
async def handle_lab_photo(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏."""
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    logger.info(f"üì∏ handle_lab_photo –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    state_data = await state.get_data()
    route_session_id = state_data.get('route_session_id')
    organization = state_data.get('selected_lab_organization')
    
    logger.info(f"üìä State data: route_session_id={route_session_id}, organization={organization}")
    
    if not route_session_id or not organization:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Ç–µ—Ä—è–Ω—ã. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏.")
        return
    
    async for session in get_session():
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
        lab_summary = await session.scalar(
            select(LabSummary).options(
                selectinload(LabSummary.summary_photos)
            ).where(
                LabSummary.route_session_id == route_session_id,
                LabSummary.organization == organization,
                LabSummary.user_id == message.from_user.id
            )
        )
        
        if not lab_summary:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        current_photos_count = len(lab_summary.summary_photos)
        if current_photos_count >= 10:
            await message.answer("‚ùå –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        lab_photo = LabSummaryPhoto(
            lab_summary_id=lab_summary.id,
            photo_file_id=photo.file_id,
            photo_order=current_photos_count + 1
        )
        session.add(lab_photo)
        await session.commit()
        
        new_photos_count = current_photos_count + 1
        
        await message.answer(
            f"‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è {new_photos_count} –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            f"–í—Å–µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {new_photos_count}/10",
            reply_markup=get_lab_photos_keyboard(new_photos_count)
        )


@user_router.callback_query(F.data == "finish_lab_photos", RouteStates.waiting_for_lab_summary_photos)
async def finish_lab_photos(callback: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."""
    organization = (await state.get_data()).get('selected_lab_organization')
    await state.set_state(RouteStates.managing_lab_summary)
    await show_lab_summary_management(callback, state, organization)


@user_router.callback_query(F.data == "add_more_lab_photos", RouteStates.waiting_for_lab_summary_photos)
async def add_more_lab_photos(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."""
    await callback.message.edit_text(
        text="üì∏ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</b>\n\n"
             "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏.",
        reply_markup=None
    )
    await callback.answer()


@user_router.callback_query(F.data == "add_lab_comment", RouteStates.managing_lab_summary)
async def add_lab_comment(callback: CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏."""
    await state.set_state(RouteStates.waiting_for_lab_summary_comment)
    
    await callback.message.edit_text(
        text="üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏</b>\n\n"
             "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–± —ç—Ç–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤).\n"
             "–ù–∞–ø—Ä–∏–º–µ—Ä: –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã, –∑–∞–º–µ—á–∞–Ω–∏—è, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n"
             "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω - –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.",
        reply_markup=get_lab_comment_confirmation_keyboard()
    )
    
    await callback.answer()


@user_router.callback_query(F.data == "edit_lab_comment", RouteStates.managing_lab_summary)
async def edit_lab_comment(callback: CallbackQuery, state: FSMContext) -> None:
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏."""
    state_data = await state.get_data()
    route_session_id = state_data.get('route_session_id')
    organization = state_data.get('selected_lab_organization')
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        lab_summary = await session.scalar(
            select(LabSummary).where(
                LabSummary.route_session_id == route_session_id,
                LabSummary.organization == organization,
                LabSummary.user_id == callback.from_user.id
            )
        )
        
        if lab_summary and lab_summary.summary_comment:
            current_comment = lab_summary.summary_comment
            preview = current_comment[:100] + "..." if len(current_comment) > 100 else current_comment
            
            await state.set_state(RouteStates.waiting_for_lab_summary_comment)
            await callback.message.edit_text(
                text=f"üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è</b>\n\n"
                     f"<b>–¢–µ–∫—É—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n{preview}\n\n"
                     f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∏—Ç—å' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.",
                reply_markup=get_lab_comment_confirmation_keyboard()
            )
        else:
            # –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é
            await add_lab_comment(callback, state)
    
    await callback.answer()


@user_router.message(F.text, RouteStates.waiting_for_lab_summary_comment)
async def handle_lab_comment(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏."""
    comment_text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    if len(comment_text) > 500:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        await state.set_state(RouteStates.waiting_for_lab_summary_comment)
        await message.answer(
            f"‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π!\n"
            f"–ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤, —É –≤–∞—Å: {len(comment_text)}\n\n"
            f"–°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.update_data(pending_lab_comment=comment_text)
    
    preview = comment_text[:100] + "..." if len(comment_text) > 100 else comment_text
    
    await message.answer(
        f"üìù <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:</b>\n\n"
        f"{preview}\n\n"
        f"–°–∏–º–≤–æ–ª–æ–≤: {len(comment_text)}/500",
        reply_markup=get_lab_comment_confirmation_keyboard()
    )


@user_router.callback_query(F.data == "save_lab_comment", RouteStates.waiting_for_lab_summary_comment)
async def save_lab_comment(callback: CallbackQuery, state: FSMContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏."""
    state_data = await state.get_data()
    route_session_id = state_data.get('route_session_id')
    organization = state_data.get('selected_lab_organization')
    comment_text = state_data.get('pending_lab_comment', '')
    
    async for session in get_session():
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
        lab_summary = await session.scalar(
            select(LabSummary).where(
                LabSummary.route_session_id == route_session_id,
                LabSummary.organization == organization,
                LabSummary.user_id == callback.from_user.id
            )
        )
        
        if lab_summary:
            lab_summary.summary_comment = comment_text
            await session.commit()
    
    await state.set_state(RouteStates.managing_lab_summary)
    await show_lab_summary_management(callback, state, organization)


@user_router.callback_query(F.data == "cancel_lab_comment", RouteStates.waiting_for_lab_summary_comment)
async def cancel_lab_comment(callback: CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è."""
    organization = (await state.get_data()).get('selected_lab_organization')
    await state.set_state(RouteStates.managing_lab_summary)
    await show_lab_summary_management(callback, state, organization)


@user_router.callback_query(F.data.startswith("complete_lab:"), RouteStates.managing_lab_summary)
async def complete_lab_summary(callback: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏."""
    organization = callback.data.split(":", 1)[1]
    state_data = await state.get_data()
    route_session_id = state_data.get('route_session_id')
    
    async for session in get_session():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ
        lab_summary = await session.scalar(
            select(LabSummary).options(
                selectinload(LabSummary.summary_photos)
            ).where(
                LabSummary.route_session_id == route_session_id,
                LabSummary.organization == organization,
                LabSummary.user_id == callback.from_user.id
            )
        )
        
        if not lab_summary:
            await callback.answer("–û—à–∏–±–∫–∞: –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        photos_count = len(lab_summary.summary_photos)
        if photos_count == 0:
            await callback.answer("‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏!", show_alert=True)
            return
        
        # –û—Ç–º–µ—á–∞–µ–º –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
        lab_summary.is_completed = True
        await session.commit()
    
    await state.set_state(RouteStates.selecting_lab_for_summary)
    await show_lab_selection(callback, state)


@user_router.callback_query(F.data == "back_to_lab_selection", RouteStates.managing_lab_summary)
async def back_to_lab_selection(callback: CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π."""
    await state.set_state(RouteStates.selecting_lab_for_summary)
    await show_lab_selection(callback, state)


@user_router.callback_query(F.data == "add_first_lab_photo", RouteStates.waiting_for_lab_summary_photos)
async def add_first_lab_photo(callback: CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏."""
    user_id = callback.from_user.id
    logger.info(f"üî• add_first_lab_photo –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
    await state.set_state(RouteStates.waiting_for_lab_summary_photos)
    logger.info(f"üéØ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_lab_summary_photos")
    
    await callback.message.edit_text(
        text="üì∏ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</b>\n\n"
             "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏.\n"
             "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ 9 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.",
        reply_markup=None
    )
    await callback.answer()


@user_router.callback_query(F.data == "remove_last_lab_photo", RouteStates.waiting_for_lab_summary_photos)
async def remove_last_lab_photo(callback: CallbackQuery, state: FSMContext) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏."""
    state_data = await state.get_data()
    route_session_id = state_data.get('route_session_id')
    organization = state_data.get('selected_lab_organization')
    
    async for session in get_session():
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
        lab_summary = await session.scalar(
            select(LabSummary).options(
                selectinload(LabSummary.summary_photos)
            ).where(
                LabSummary.route_session_id == route_session_id,
                LabSummary.organization == organization,
                LabSummary.user_id == callback.from_user.id
            )
        )
        
        if not lab_summary:
            await callback.answer("–û—à–∏–±–∫–∞: –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        photos = sorted(lab_summary.summary_photos, key=lambda x: x.photo_order, reverse=True)
        if photos:
            last_photo = photos[0]
            await session.delete(last_photo)
            await session.commit()
            
            remaining_count = len(photos) - 1
            await callback.message.edit_text(
                text=f"üóë –ü–æ—Å–ª–µ–¥–Ω—è—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É–¥–∞–ª–µ–Ω–∞!\n\n"
                     f"–û—Å—Ç–∞–ª–æ—Å—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {remaining_count}/10",
                reply_markup=get_lab_photos_keyboard(remaining_count)
            )
        else:
            await callback.answer("–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
    
    await callback.answer()


# ==============================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–ë–†–ê–ë–û–¢–ö–ò –ò –ü–†–û–ü–£–°–ö–ê –¢–û–ß–ï–ö –ú–ê–†–®–†–£–¢–ê
# ==============================================

@user_router.callback_query(F.data == "process_point", RouteStates.waiting_for_photo)
async def process_point(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ—á–∫—É'.
    
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.
    """
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    
    if not current_point:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ
    point_info = (
        f"üìç <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—á–∫–∏:</b>\n\n"
        f"üè¢ <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</b> {current_point['organization']}\n"
        f"üè† <b>–ê–¥—Ä–µ—Å:</b> {current_point['address']}\n\n"
        f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏"
    )
    
    await callback.message.edit_text(
        text=point_info,
        reply_markup=None
    )
    await callback.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")


@user_router.callback_query(F.data == "skip_point", RouteStates.waiting_for_photo)
async def skip_point(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–æ—á–∫—É'.
    
    –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ç–æ—á–∫—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–π.
    """
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    route_points = state_data.get('route_points', [])
    current_point_index = state_data.get('current_point_index', 0)
    selected_city = state_data.get('selected_city')
    route_session_id = state_data.get('route_session_id')
    collected_containers = state_data.get('collected_containers', {})
    completed_points = state_data.get('completed_points', 0)
    
    if not current_point or not route_session_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—É—é —Ç–æ—á–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    from database.models import Route, RouteProgress
    from database.database import get_session
    from sqlalchemy import select
    
    async for session in get_session():
        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ routes
        stmt = select(Route).where(
            Route.city_name == selected_city,
            Route.organization == current_point['organization'],
            Route.point_name == current_point['name']
        )
        route_record = await session.scalar(stmt)
        
        if route_record:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–π —Ç–æ—á–∫–µ
            progress_record = RouteProgress(
                user_id=callback.from_user.id,
                route_id=route_record.id,
                route_session_id=route_session_id,
                containers_count=0,  # –ü—Ä–æ–ø—É—â–µ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ - 0 –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
                status='skipped',  # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—É—é
                notes=f"–¢–æ—á–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            )
            session.add(progress_record)
            await session.commit()
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–µ
    next_point_index = current_point_index + 1
    
    if next_point_index < len(route_points):
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–µ
        next_point = route_points[next_point_index]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            current_point=next_point,
            current_point_index=next_point_index,
            completed_points=completed_points + 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ (–ø—Ä–æ–ø—É—â–µ–Ω–Ω–∞—è = –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è)
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ç–æ—á–∫—É
        point_info = format_route_progress(
            city=selected_city,
            current_point=next_point,
            total_points=len(route_points),
            current_index=next_point_index,
            collected_containers=collected_containers,
            completed_points=completed_points + 1
        )
        point_info += "\n\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–æ–π:"
        
        await callback.message.edit_text(
            text=point_info,
            reply_markup=get_point_action_keyboard()
        )
        await callback.answer(f"‚è≠Ô∏è –¢–æ—á–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π")
        
    else:
        # –í—Å–µ —Ç–æ—á–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –º–∞—Ä—à—Ä—É—Ç–∞
        await state.set_state(RouteStates.waiting_for_route_completion)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –º–∞—Ä—à—Ä—É—Ç–∞
        route_type = state_data.get('route_type', 'collection')
        
        if route_type == 'delivery':
            # –î–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ú–æ—Å–∫–≤—É
            await callback.message.edit_text(
                text=f"üèÅ <b>–ú–∞—Ä—à—Ä—É—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
                     f"üìç –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç–æ—á–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞\n"
                     f"üìÖ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%H:%M')}\n\n"
                     f"üìù –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.",
                reply_markup=get_complete_route_keyboard(route_type)
            )
        else:
            # –î–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–±–æ—Ä–∞
            await callback.message.edit_text(
                text=f"üèÅ <b>–ú–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
                     f"üìç –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç–æ—á–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞\n"
                     f"üìÖ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%H:%M')}\n\n"
                     f"–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å \n"
                     f"–∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è–º.",
                reply_markup=get_complete_route_keyboard(route_type)
            )
        
        await callback.answer("üèÅ –ú–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")


# ==============================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê –î–ê–ù–ù–´–• –õ–ê–ë–û–†–ê–¢–û–†–ò–ô –í –ú–ê–†–®–†–£–¢–ê–•
# ==============================================

@user_router.callback_query(F.data.startswith("ld:"))
async def view_route_lab_data(callback: CallbackQuery) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π —Å –∏—Ö –∏—Ç–æ–≥–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    """
    callback_data = parse_callback(callback.data)
    if not callback_data or callback_data.get('action') != 'view_lab_data':
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    
    route_id = callback_data['route_id']
    logger.info(f"üè• view_route_lab_data –≤—ã–∑–≤–∞–Ω –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ {route_id}")
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
        stmt = select(LabSummary).options(
            selectinload(LabSummary.summary_photos)
        ).where(
            LabSummary.route_session_id == route_id,
            LabSummary.user_id == callback.from_user.id
        )
        
        labs = await session.scalars(stmt)
        labs_list = labs.all()
        
        if not labs_list:
            await callback.answer("‚ùå –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        labs_data = []
        for lab in labs_list:
            labs_data.append({
                'organization': lab.organization,
                'photos_count': len(lab.summary_photos),
                'has_comment': bool(lab.summary_comment)
            })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = f"üè• <b>–ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è–º</b>\n\n"
        
        for lab_data in labs_data:
            organization = lab_data['organization']
            photos_count = lab_data['photos_count']
            has_comment = lab_data['has_comment']
            
            message_text += f"üè¢ <b>{organization}</b>\n"
            message_text += f"   üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {photos_count}\n"
            message_text += f"   üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {'\u2705' if has_comment else '\u2796'}\n\n"
        
        message_text += "üëÜ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_route_lab_data_keyboard(route_id, labs_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ–º
        if callback.message.photo:
            # –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(
                text=message_text,
                reply_markup=keyboard
            )
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
            await callback.message.edit_text(
                text=message_text,
                reply_markup=keyboard
            )
    
    await callback.answer()


@user_router.callback_query(F.data.startswith("sl:"))
async def view_specific_lab_data(callback: CallbackQuery) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏.
    """
    callback_data = parse_callback(callback.data)
    if not callback_data or callback_data.get('action') != 'view_route_lab':
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    
    route_id = callback_data['route_id']
    organization = callback_data['organization']
    
    logger.info(f"üè• view_specific_lab_data –≤—ã–∑–≤–∞–Ω –¥–ª—è {organization} –≤ –º–∞—Ä—à—Ä—É—Ç–µ {route_id}")
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
        lab_summary = await session.scalar(
            select(LabSummary).options(
                selectinload(LabSummary.summary_photos)
            ).where(
                LabSummary.route_session_id == route_id,
                LabSummary.organization == organization,
                LabSummary.user_id == callback.from_user.id
            )
        )
        
        if not lab_summary:
            await callback.answer("‚ùå –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        photos = lab_summary.summary_photos
        total_photos = len(photos)
        has_comment = bool(lab_summary.summary_comment)
        
        if total_photos > 0:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
            await show_lab_photo(callback, route_id, organization, 0)
        else:
            # –ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
            message_text = f"üè• <b>{organization}</b>\n\n"
            
            if has_comment:
                message_text += f"üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n{lab_summary.summary_comment}\n\n"
            else:
                message_text += "üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω\n\n"
            
            message_text += "üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã"
            
            keyboard = get_lab_data_viewer_keyboard(
                route_id=route_id,
                organization=organization,
                current_photo_index=0,
                total_photos=0,
                has_comment=has_comment
            )
            
            await callback.message.edit_text(
                text=message_text,
                reply_markup=keyboard
            )
    
    await callback.answer()


async def show_lab_photo(
    callback: CallbackQuery,
    route_id: str,
    organization: str,
    photo_index: int
) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏.
    """
    async for session in get_session():
        lab_summary = await session.scalar(
            select(LabSummary).options(
                selectinload(LabSummary.summary_photos)
            ).where(
                LabSummary.route_session_id == route_id,
                LabSummary.organization == organization,
                LabSummary.user_id == callback.from_user.id
            )
        )
        
        if not lab_summary or not lab_summary.summary_photos:
            await callback.answer("‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        photos = sorted(lab_summary.summary_photos, key=lambda x: x.photo_order)
        total_photos = len(photos)
        
        if photo_index >= total_photos:
            await callback.answer("‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        photo = photos[photo_index]
        has_comment = bool(lab_summary.summary_comment)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
        caption = f"üè• <b>{organization}</b>\n\n"
        caption += f"üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è {photo_index + 1} –∏–∑ {total_photos}\n\n"
        
        if photo.description:
            caption += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {photo.description}\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_lab_data_viewer_keyboard(
            route_id=route_id,
            organization=organization,
            current_photo_index=photo_index,
            total_photos=total_photos,
            has_comment=has_comment
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        await callback.message.answer_photo(
            photo=photo.photo_file_id,
            caption=caption,
            reply_markup=keyboard
        )


@user_router.callback_query(F.data.startswith("lp:"))
async def navigate_lab_photo(callback: CallbackQuery) -> None:
    """
    –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏.
    """
    callback_data = parse_callback(callback.data)
    if not callback_data or callback_data.get('action') != 'lab_photo':
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    
    route_id = callback_data['route_id']
    organization = callback_data['organization']
    photo_index = callback_data['photo_index']
    
    logger.info(f"üì∏ navigate_lab_photo: {organization}, —Ñ–æ—Ç–æ {photo_index}")
    
    await show_lab_photo(callback, route_id, organization, photo_index)
    await callback.answer()


@user_router.callback_query(F.data.startswith("lc:"))
async def show_lab_comment(callback: CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏.
    """
    callback_data = parse_callback(callback.data)
    if not callback_data or callback_data.get('action') != 'lab_comment':
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    
    route_id = callback_data['route_id']
    organization = callback_data['organization']
    
    logger.info(f"üìù show_lab_comment: {organization}")
    
    async for session in get_session():
        lab_summary = await session.scalar(
            select(LabSummary).where(
                LabSummary.route_session_id == route_id,
                LabSummary.organization == organization,
                LabSummary.user_id == callback.from_user.id
            )
        )
        
        if not lab_summary or not lab_summary.summary_comment:
            await callback.answer("‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
        message_text = f"üè• <b>{organization}</b>\n\n"
        message_text += f"üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n\n"
        message_text += f"{lab_summary.summary_comment}"
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=create_specific_lab_callback(route_id, organization)
                )
            ]]
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        if callback.message.photo:
            # –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer(
                text=message_text,
                reply_markup=keyboard
            )
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
            await callback.message.edit_text(
                text=message_text,
                reply_markup=keyboard
            )
    
    await callback.answer()


@user_router.callback_query(F.data.startswith("br:"))
async def back_to_route_details(callback: CallbackQuery) -> None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –¥–µ—Ç–∞–ª—è–º –º–∞—Ä—à—Ä—É—Ç–∞.
    """
    callback_data = parse_callback(callback.data)
    if not callback_data or callback_data.get('action') != 'back_to_route':
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    
    route_id = callback_data['route_id']
    point_index = callback_data.get('point_index', 0)
    
    logger.info(f"‚¨ÖÔ∏è back_to_route_details: {route_id}, —Ç–æ—á–∫–∞ {point_index}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
    async for session in get_session():
        stmt = select(RouteProgress).options(
            selectinload(RouteProgress.route),
            selectinload(RouteProgress.photos)
        ).where(
            RouteProgress.route_session_id == route_id
        ).order_by(RouteProgress.visited_at)
        
        progresses = await session.scalars(stmt)
        progresses_list = progresses.all()
        
        if not progresses_list:
            await callback.answer("‚ùå –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
        await show_route_point_details(callback, progresses_list, point_index, route_id)
    
    await callback.answer()


# ==============================================
# –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ù–ï–û–ü–û–ó–ù–ê–ù–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô
# (–î–û–õ–ñ–ï–ù –ë–´–¢–¨ –í –°–ê–ú–û–ú –ö–û–ù–¶–ï!)
# ==============================================

@user_router.message()
async def unknown_message(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    
    –ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é —Å –±–æ—Ç–æ–º.
    
    Args:
        message: –û–±—ä–µ–∫—Ç –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    current_state = await state.get_state()
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    logger.info(f"ü§î unknown_message –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    logger.info(f"üì± –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message.content_type}")
    logger.info(f"üéØ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    
    if message.photo:
        logger.info(f"üì∏ –ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –Ω–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º")
    
    if current_state == RouteStates.waiting_for_photo:
        await message.answer(ERROR_MESSAGES['photo_required'])
    elif current_state == RouteStates.waiting_for_additional_photos:
        await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã—à–µ")
    elif current_state == RouteStates.waiting_for_lab_summary_photos:
        if message.photo:
            logger.info(f"üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_for_lab_summary_photos, –Ω–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ handle_lab_photo")
            await message.answer("‚ö†Ô∏è –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏.")
    elif current_state == RouteStates.waiting_for_containers_count:
        await message.answer(ERROR_MESSAGES['invalid_containers_count'])
    elif current_state == RouteStates.waiting_for_comment:
        await message.answer("üìù –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —ç—Ç–æ–π —Ç–æ—á–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)")
    elif current_state == RouteStates.managing_point_data:
        await message.answer("üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∏")
    elif current_state == RouteStates.waiting_for_moscow_final_comment:
        await message.answer("üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –∏—Ç–æ–≥–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ú–æ—Å–∫–≤—É (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ, –º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)")
    else:
        await message.answer(
            "ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.",
            reply_markup=get_main_menu_keyboard()
        )
