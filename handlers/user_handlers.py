"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫—É—Ä—å–µ—Ä—Å–∫–æ–≥–æ –±–æ—Ç–∞.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥,
—Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π. –ö–∞–∂–¥—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π
—Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–û—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:
- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (/start, /help)
- –í—ã–±–æ—Ä –∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –ø–æ–¥—Å—á—ë—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
"""

import logging
from typing import Optional, List
from datetime import datetime, timedelta
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, PhotoSize
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, and_
from sqlalchemy.orm import selectinload

from utils.progress_bar import format_route_progress, format_route_summary

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from database.database import get_session
from database.models import User, Route, RouteProgress, Delivery, RoutePhoto
from utils.callback_manager import parse_callback
from states.user_states import RouteStates
from keyboards.user_keyboards import (
    get_main_menu_keyboard,
    get_cities_keyboard, 
    get_route_points_keyboard,
    get_confirmation_keyboard,
    get_complete_route_keyboard,
    get_photo_actions_keyboard,
    get_finish_photos_keyboard,
    get_point_data_management_keyboard,
    get_route_selection_keyboard,
    get_route_detail_keyboard,
    get_photos_viewer_keyboard
)
from config import (
    WELCOME_MESSAGE,
    HELP_MESSAGE, 
    ERROR_MESSAGES,
    AVAILABLE_ROUTES,
    MOSCOW_DELIVERY_ADDRESSES,
    MIN_CONTAINERS,
    MAX_CONTAINERS
)
from utils.route_manager import RouteManager

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
user_router = Router(name='user_router')

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)


@user_router.message(Command('start'))
async def cmd_start(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è:
    1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    2. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    3. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    4. –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –û—á–∏—â–∞–µ–º –ª—é–±—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name
    
    # –†–∞–±–æ—Ç–∞–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    async for session in get_session():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        result = await session.get(User, user_id)
        
        if not result:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_user = User(
                telegram_id=user_id,
                username=username,
                full_name=full_name,
                is_active=True
            )
            session.add(new_user)
            await session.commit()
            
            logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} (@{username})")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result.username = username
            result.full_name = full_name
            result.is_active = True
            await session.commit()
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    await message.answer(
        text=WELCOME_MESSAGE,
        reply_markup=get_main_menu_keyboard()
    )


@user_router.message(Command('help'))
async def cmd_help(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.
    
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await message.answer(
        text=HELP_MESSAGE,
        reply_markup=get_main_menu_keyboard()
    )


@user_router.message(F.text == "üöö –í—ã–±—Ä–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç")
async def select_route(message: Message, state: FSMContext) -> None:
    """
    –ù–∞—á–∞–ª–æ –≤—ã–±–æ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞.
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
    –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stmt = select(RouteProgress).where(
            and_(
                RouteProgress.user_id == message.from_user.id,
                RouteProgress.status.in_(['pending', 'in_progress'])
            )
        )
        active_route = await session.scalar(stmt)
        
        if active_route:
            await message.answer(
                "‚ùóÔ∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ.",
                reply_markup=get_main_menu_keyboard()
            )
            return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    await state.set_state(RouteStates.waiting_for_city_selection)
    
    await message.answer(
        "üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞:",
        reply_markup=get_cities_keyboard()
    )


@user_router.callback_query(F.data.startswith("city:"), RouteStates.waiting_for_city_selection)
async def city_selected(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞.
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
    """
    # –ü—Ä–∏–≤–æ–¥–∏–º callback.data –∫ —Å—Ç—Ä–æ–∫–µ
    raw_data = callback.data
    if isinstance(raw_data, (list, tuple)):
        raw_data = raw_data[0]
    city_name = str(raw_data).split(":", 1)[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ—Ä–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if city_name not in AVAILABLE_ROUTES:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    route_points = AVAILABLE_ROUTES[city_name]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –∏ –º–∞—Ä—à—Ä—É—Ç
    await state.update_data(
        selected_city=city_name,
        route_points=route_points,
        current_point_index=0,
        collected_containers={},
        completed_points=0  # –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫
    )
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.set_state(RouteStates.waiting_for_route_confirmation)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ
    route_info = f"üìç <b>–í—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: {city_name}</b>\n\n"
    route_info += f"üìã <b>–¢–æ—á–∫–∏ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è ({len(route_points)}):</b>\n"
    
    for i, point in enumerate(route_points, 1):
        route_info += f"{i}. <b>{point['organization']}</b> - {point['name']}\n"
        route_info += f"   üìç {point['address']}\n\n"
    
    route_info += "‚ùì <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞:</b>"
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    from keyboards.user_keyboards import get_confirmation_keyboard
    
    await callback.message.edit_text(
        text=route_info,
        reply_markup=get_confirmation_keyboard(
            confirm_text="‚úÖ –ù–∞—á–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç",
            cancel_text="‚ùå –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥",
            confirm_callback="confirm_route_start",
            cancel_callback="back_to_city_selection"
        )
    )
    
    await callback.answer()

@user_router.callback_query(F.data == "confirm_route_start", RouteStates.waiting_for_route_confirmation)
async def confirm_route_start(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∞.
    
    –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞.
    """
    state_data = await state.get_data()
    selected_city = state_data.get('selected_city')
    route_points = state_data.get('route_points')
    
    if not route_points:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        await state.clear()
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
    from utils.route_session import generate_route_session_id
    route_session_id = generate_route_session_id(callback.from_user.id, selected_city)
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
    current_point = route_points[0]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(
        current_point=current_point,
        total_points=len(route_points),
        route_session_id=route_session_id
    )
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    await state.set_state(RouteStates.waiting_for_photo)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∞
    await state.update_data(route_start_time=datetime.now().isoformat())
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    point_info = format_route_progress(
        city=selected_city,
        current_point=current_point,
        total_points=len(route_points),
        current_index=0,
        collected_containers={},
        completed_points=0  # –ù–∞ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–µ –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
    )
    point_info += "\n\nüì∏ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ"
    
    await callback.message.edit_text(
        text=point_info,
        reply_markup=None
    )
    
    await callback.answer("–ú–∞—Ä—à—Ä—É—Ç –Ω–∞—á–∞—Ç!")


@user_router.callback_query(F.data == "back_to_city_selection", RouteStates.waiting_for_route_confirmation)
async def back_to_city_selection(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞.
    
    –û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ —Å–Ω–æ–≤–∞.
    """
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    await state.set_state(RouteStates.waiting_for_city_selection)
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
    await state.update_data(
        selected_city=None,
        route_points=None,
        current_point=None
    )
    
    await callback.message.edit_text(
        text="üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞:",
        reply_markup=get_cities_keyboard()
    )
    
    await callback.answer("–í—ã–±–æ—Ä –æ—Ç–º–µ–Ω—ë–Ω")


@user_router.callback_query(F.data == "cancel_city_selection")
async def cancel_city_selection(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞.
    
    –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    
    Args:
        callback: –û–±—ä–µ–∫—Ç callback query –æ—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    await state.clear()
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await callback.message.edit_text(
        text="‚ùå –í—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç–º–µ–Ω—ë–Ω.",
        reply_markup=None
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )
    
    await callback.answer("–í—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç–º–µ–Ω—ë–Ω")



@user_router.callback_query(F.data == "cancel_route")
async def cancel_route(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞.
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –º–∞—Ä—à—Ä—É—Ç–∞.
    
    Args:
        callback: –û–±—ä–µ–∫—Ç callback query –æ—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –º–∞—Ä—à—Ä—É—Ç–∞
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    await callback.message.edit_text(
        text="‚ö†Ô∏è <b>–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç?</b>\n\n"
             "–í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω!",
        reply_markup=get_confirmation_keyboard(
            confirm_text="‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å",
            cancel_text="‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", 
            confirm_callback="confirm_cancel_route",
            cancel_callback="back_to_route"
        )
    )
    
    await callback.answer()


@user_router.callback_query(F.data == "confirm_cancel_route")
async def confirm_cancel_route(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –º–∞—Ä—à—Ä—É—Ç–∞.
    """
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    await callback.message.edit_text(
        text="‚úÖ –ú–∞—Ä—à—Ä—É—Ç –æ—Ç–º–µ–Ω—ë–Ω.",
        reply_markup=get_main_menu_keyboard()
    )
    
    await callback.answer("–ú–∞—Ä—à—Ä—É—Ç –æ—Ç–º–µ–Ω—ë–Ω")

@user_router.callback_query(F.data == "back_to_route")
async def back_to_route(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É.
    """
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    
    if current_point:
        point_info = (
            f"üìç <b>–¢–µ–∫—É—â–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞:</b>\n\n"
            f"üè¢ <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</b> {current_point['organization']}\n"
            f"üè† <b>–ê–¥—Ä–µ—Å:</b> {current_point['address']}\n\n"
            f"üì∏ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ"
        )
        
        await callback.message.edit_text(
            text=point_info,
            reply_markup=None
        )
    else:
        await callback.message.edit_text(
            text="‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=None
        )
        
        await callback.message.answer(
            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )
    
    await callback.answer()

@user_router.message(F.photo, RouteStates.waiting_for_photo)
async def photo_received(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞.
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    
    if not current_point:
        await message.answer(ERROR_MESSAGES['route_not_selected'])
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (—Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞)
    photo: PhotoSize = message.photo[-1]
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    photos_list = state_data.get('photos_list', [])
    photos_list.append(photo.file_id)
    
    await state.update_data(photos_list=photos_list)
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∏
    await state.set_state(RouteStates.managing_point_data)
    
    await message.answer(
        f"üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—É—á–µ–Ω–∞! ({len(photos_list)} —à—Ç.)\n\n"
        f"üìç –¢–æ—á–∫–∞: <b>{current_point['name']}</b>\n"
        f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <b>{current_point['organization']}</b>\n\n"
        f"–¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ—á–∫–∏:",
        reply_markup=get_point_data_management_keyboard(
            has_photos=True,
            has_containers=False,
            has_comment=False,
            photos_count=len(photos_list),
            containers_count=0,
            comment_text=""
        )
    )


@user_router.callback_query(F.data == "add_more_photos", RouteStates.waiting_for_photo_decision)
async def add_more_photos(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ".
    
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.
    """
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    photos_list = state_data.get('photos_list', [])
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    await state.set_state(RouteStates.waiting_for_additional_photos)
    
    await callback.message.edit_text(
        f"üì∏ –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ({len(photos_list)} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ)\n\n"
        f"üìç –¢–æ—á–∫–∞: <b>{current_point['name']}</b>\n"
        f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <b>{current_point['organization']}</b>\n\n"
        f"üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'",
        reply_markup=get_finish_photos_keyboard(len(photos_list))
    )
    
    await callback.answer()


@user_router.callback_query(F.data == "proceed_to_boxes", RouteStates.waiting_for_photo_decision)
async def proceed_to_boxes(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤".
    
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.
    """
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    await state.set_state(RouteStates.waiting_for_containers_count)
    
    await callback.message.edit_text(
        f"üì¶ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
        f"üìç –¢–æ—á–∫–∞: <b>{current_point['name']}</b>\n"
        f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <b>{current_point['organization']}</b>\n\n"
        f"–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\n"
        f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {MIN_CONTAINERS} –¥–æ {MAX_CONTAINERS}:"
    )
    
    await callback.answer()


@user_router.message(F.photo, RouteStates.waiting_for_additional_photos)
async def additional_photo_received(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    photos_list = state_data.get('photos_list', [])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    photo: PhotoSize = message.photo[-1]
    photos_list.append(photo.file_id)
    
    await state.update_data(photos_list=photos_list)
    
    await message.answer(
        f"üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞! ({len(photos_list)} –≤—Å–µ–≥–æ)\n\n"
        f"üìç –¢–æ—á–∫–∞: <b>{current_point['name']}</b>\n"
        f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <b>{current_point['organization']}</b>\n\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ",
        reply_markup=get_finish_photos_keyboard(len(photos_list))
    )


@user_router.callback_query(F.data == "add_one_more_photo", RouteStates.waiting_for_additional_photos)
async def add_one_more_photo(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ" –≤ —Ä–µ–∂–∏–º–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.
    """
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    photos_list = state_data.get('photos_list', [])
    
    await callback.message.edit_text(
        f"üì∏ –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ({len(photos_list)} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ)\n\n"
        f"üìç –¢–æ—á–∫–∞: <b>{current_point['name']}</b>\n"
        f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <b>{current_point['organization']}</b>\n\n"
        f"üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"
    )
    
    await callback.answer()


@user_router.callback_query(F.data == "finish_photos", RouteStates.waiting_for_additional_photos)
async def finish_photos(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ" - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∏.
    """
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    photos_list = state_data.get('photos_list', [])
    containers_count = state_data.get('containers_count', 0)
    comment = state_data.get('comment', '')
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∏
    await state.set_state(RouteStates.managing_point_data)
    
    status_text = _get_point_status_text(state_data, current_point)
    
    await callback.message.edit_text(
        status_text,
        reply_markup=get_point_data_management_keyboard(
            has_photos=len(photos_list) > 0,
            has_containers=containers_count >= 0,
            has_comment=bool(comment),
            photos_count=len(photos_list),
            containers_count=containers_count,
            comment_text=comment
        )
    )
    
    await callback.answer()


@user_router.message(F.text, RouteStates.waiting_for_containers_count)
async def containers_count_received(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å
    –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –º–∞—Ä—à—Ä—É—Ç–∞.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    try:
        containers_count = int(message.text.strip())
    except ValueError:
        await message.answer(
            f"‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç {MIN_CONTAINERS} –¥–æ {MAX_CONTAINERS}"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
    if containers_count < MIN_CONTAINERS or containers_count > MAX_CONTAINERS:
        await message.answer(ERROR_MESSAGES['invalid_containers_count'])
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    photos_list = state_data.get('photos_list', [])
    selected_city = state_data.get('selected_city')
    current_point_index = state_data.get('current_point_index', 0)
    total_points = state_data.get('total_points', 0)
    collected_containers = state_data.get('collected_containers', {})
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã–º–∏
    await state.update_data(containers_count=containers_count)
    await state.set_state(RouteStates.managing_point_data)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    state_data = await state.get_data()
    photos_list = state_data.get('photos_list', [])
    comment = state_data.get('comment', '')
    
    status_text = _get_point_status_text(state_data, current_point)
    
    await message.answer(
        f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {containers_count}\n\n" + status_text,
        reply_markup=get_point_data_management_keyboard(
            has_photos=len(photos_list) > 0,
            has_containers=True,
            has_comment=bool(comment),
            photos_count=len(photos_list),
            containers_count=containers_count,
            comment_text=comment
        )
    )


@user_router.message(F.text, RouteStates.waiting_for_comment)
async def comment_received(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —Ç–æ—á–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞.
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∏.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM  
        bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    comment = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    if len(comment) > 500:
        await message.answer("‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 500 —Å–∏–º–≤–æ–ª–æ–≤")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    photos_list = state_data.get('photos_list', [])
    containers_count = state_data.get('containers_count', 0)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(comment=comment)
    await state.set_state(RouteStates.managing_point_data)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    state_data = await state.get_data()
    
    status_text = _get_point_status_text(state_data, current_point)
    
    await message.answer(
        f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n" + status_text,
        reply_markup=get_point_data_management_keyboard(
            has_photos=len(photos_list) > 0,
            has_containers=containers_count >= 0,
            has_comment=True,
            photos_count=len(photos_list),
            containers_count=containers_count,
            comment_text=comment
        )
    )


# ==============================================
# –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–ú–ò –¢–û–ß–ö–ò
# ==============================================

def _get_point_status_text(state_data: dict, current_point: dict) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ—á–∫–∏.
    """
    photos_list = state_data.get('photos_list', [])
    containers_count = state_data.get('containers_count', 0)
    comment = state_data.get('comment', '')
    
    status_text = f"üìç –¢–æ—á–∫–∞: <b>{current_point['name']}</b>\n"
    status_text += f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <b>{current_point['organization']}</b>\n\n"
    status_text += "üìä –°—Ç–∞—Ç—É—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:\n"
    status_text += f"üì∏ –§–æ—Ç–æ: {'‚úÖ' if photos_list else '‚ùå'} ({len(photos_list)} —à—Ç.)\n"
    status_text += f"üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: {'‚úÖ' if containers_count >= 0 else '‚ùå'} ({containers_count} —à—Ç.)\n"
    status_text += f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {'‚úÖ' if comment else '‚ùå'}\n\n"
    
    if photos_list and containers_count >= 0 and comment:
        status_text += "üöÄ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã! –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç."
    else:
        status_text += "‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
    
    return status_text


@user_router.callback_query(F.data == "add_photos", RouteStates.managing_point_data)
async def add_photos_from_management(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏.
    """
    await state.set_state(RouteStates.waiting_for_additional_photos)
    
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    photos_list = state_data.get('photos_list', [])
    
    await callback.message.edit_text(
        f"üì∏ –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ({len(photos_list)} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ)\n\n"
        f"üìç –¢–æ—á–∫–∞: <b>{current_point['name']}</b>\n"
        f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <b>{current_point['organization']}</b>\n\n"
        f"üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'",
        reply_markup=get_finish_photos_keyboard(len(photos_list))
    )
    
    await callback.answer()


@user_router.callback_query(F.data == "edit_photos", RouteStates.managing_point_data)
async def edit_photos_from_management(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏.
    """
    await state.set_state(RouteStates.waiting_for_additional_photos)
    
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    photos_list = state_data.get('photos_list', [])
    
    await callback.message.edit_text(
        f"üì∏ –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ({len(photos_list)} —à—Ç.)\n\n"
        f"üìç –¢–æ—á–∫–∞: <b>{current_point['name']}</b>\n"
        f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <b>{current_point['organization']}</b>\n\n"
        f"üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞",
        reply_markup=get_finish_photos_keyboard(len(photos_list))
    )
    
    await callback.answer()


@user_router.callback_query(F.data == "add_containers", RouteStates.managing_point_data)
async def add_containers_from_management(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏.
    """
    await state.set_state(RouteStates.waiting_for_containers_count)
    
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    
    await callback.message.edit_text(
        f"üì¶ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\n\n"
        f"üìç –¢–æ—á–∫–∞: <b>{current_point['name']}</b>\n"
        f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <b>{current_point['organization']}</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {MIN_CONTAINERS} –¥–æ {MAX_CONTAINERS}:"
    )
    
    await callback.answer()


@user_router.callback_query(F.data == "edit_containers", RouteStates.managing_point_data)
async def edit_containers_from_management(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏.
    """
    await state.set_state(RouteStates.waiting_for_containers_count)
    
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    current_containers = state_data.get('containers_count', 0)
    
    await callback.message.edit_text(
        f"üì¶ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\n\n"
        f"üìç –¢–æ—á–∫–∞: <b>{current_point['name']}</b>\n"
        f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <b>{current_point['organization']}</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {current_containers}\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –æ—Ç {MIN_CONTAINERS} –¥–æ {MAX_CONTAINERS}:"
    )
    
    await callback.answer()


@user_router.callback_query(F.data == "add_comment", RouteStates.managing_point_data)
async def add_comment_from_management(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏.
    """
    await state.set_state(RouteStates.waiting_for_comment)
    
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    
    await callback.message.edit_text(
        f"üìù –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç–æ—á–∫–µ\n\n"
        f"üìç –¢–æ—á–∫–∞: <b>{current_point['name']}</b>\n"
        f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <b>{current_point['organization']}</b>\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤):"
    )
    
    await callback.answer()


@user_router.callback_query(F.data == "edit_comment", RouteStates.managing_point_data)
async def edit_comment_from_management(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏.
    """
    await state.set_state(RouteStates.waiting_for_comment)
    
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    current_comment = state_data.get('comment', '')
    
    await callback.message.edit_text(
        f"üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\n\n"
        f"üìç –¢–æ—á–∫–∞: <b>{current_point['name']}</b>\n"
        f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <b>{current_point['organization']}</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {current_comment}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤):"
    )
    
    await callback.answer()


@user_router.callback_query(F.data == "continue_route", RouteStates.managing_point_data)
async def continue_route_from_management(callback: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç".
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—á–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–µ.
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    current_point = state_data.get('current_point')
    photos_list = state_data.get('photos_list', [])
    selected_city = state_data.get('selected_city')
    current_point_index = state_data.get('current_point_index', 0)
    total_points = state_data.get('total_points', 0)
    collected_containers = state_data.get('collected_containers', {})
    containers_count = state_data.get('containers_count', 0)
    comment = state_data.get('comment', '')
    route_session_id = state_data.get('route_session_id')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    if not photos_list or containers_count < 0 or not comment:
        await callback.answer("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ!", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async for session in get_session():
        # –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ë–î
        stmt = select(Route).where(
            and_(
                Route.city_name == selected_city,
                Route.point_name == current_point['name'],
                Route.organization == current_point['organization']
            )
        )
        route_record = await session.scalar(stmt)
        
        if not route_record:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –º–∞—Ä—à—Ä—É—Ç–∞
            coords = current_point.get('coordinates', (None, None))
            lat, lon = coords if isinstance(coords, tuple) else (None, None)

            route_record = Route(
                city_name=selected_city,
                point_name=current_point['name'],
                address=current_point['address'],
                organization=current_point['organization'],
                latitude=lat,
                longitude=lon,
                order_index=current_point_index
            )
            session.add(route_record)
            await session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –±–µ–∑ –∫–æ–º–º–∏—Ç–∞
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress = RouteProgress(
            user_id=callback.from_user.id,
            route_id=route_record.id,
            route_session_id=route_session_id,
            containers_count=containers_count,
            notes=comment,
            status='completed'
        )
        session.add(progress)
        await session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        for index, photo_file_id in enumerate(photos_list, 1):
            photo_record = RoutePhoto(
                route_progress_id=progress.id,
                photo_file_id=photo_file_id,
                photo_order=index
            )
            session.add(photo_record)
        
        await session.commit()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º
    org = current_point['organization']
    collected_containers[org] = collected_containers.get(org, 0) + containers_count
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫
    completed_points = state_data.get('completed_points', 0) + 1
    
    await state.update_data(
        collected_containers=collected_containers,
        completed_points=completed_points
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â—ë —Ç–æ—á–∫–∏ –≤ –º–∞—Ä—à—Ä—É—Ç–µ
    next_point_index = current_point_index + 1
    
    if next_point_index < total_points:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–µ
        route_points = AVAILABLE_ROUTES[selected_city]
        next_point = route_points[next_point_index]
        
        await state.update_data(
            current_point=next_point,
            current_point_index=next_point_index,
            photos_list=[],  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –Ω–æ–≤–æ–π —Ç–æ—á–∫–∏
            containers_count=0,  # –û—á–∏—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è –Ω–æ–≤–æ–π —Ç–æ—á–∫–∏
            comment=""  # –û—á–∏—â–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –Ω–æ–≤–æ–π —Ç–æ—á–∫–∏
        )
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–∏
        await state.set_state(RouteStates.waiting_for_photo)
        
        point_info = format_route_progress(
            city=selected_city,
            current_point=next_point,
            total_points=total_points,
            current_index=next_point_index,
            collected_containers=collected_containers,
            completed_points=completed_points  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫
        )
        point_info = f"‚úÖ –¢–æ—á–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ–±—Ä–∞–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {containers_count}, —Ñ–æ—Ç–æ: {len(photos_list)}\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n{point_info}\n\nüì∏ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ"
        
        await callback.message.answer(point_info)
        
    else:
        # –í—Å–µ —Ç–æ—á–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –º–∞—Ä—à—Ä—É—Ç–∞
        await state.set_state(RouteStates.waiting_for_route_completion)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –ø–æ –º–∞—Ä—à—Ä—É—Ç—É
        summary = f"üéâ <b>–í—Å–µ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω—ã!</b>\n\n"
        summary += f"‚úÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_points} –∏–∑ {total_points} —Ç–æ—á–µ–∫</b>\n"
        summary += f"üìä <b>–°–≤–æ–¥–∫–∞ –ø–æ —Å–±–æ—Ä—É:</b>\n"
        
        total_collected = 0
        for organization, count in collected_containers.items():
            summary += f"‚Ä¢ {organization}: {count} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\n"
            total_collected += count
        
        summary += f"\nüì¶ <b>–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ:</b> {total_collected} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        
        await callback.message.answer(
            text=summary,
            reply_markup=get_complete_route_keyboard()
        )
    
    await callback.answer()


@user_router.callback_query(F.data == "complete_route", RouteStates.waiting_for_route_completion)
async def complete_route(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ú–æ—Å–∫–≤—É.
    
    –°–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å–∏ –¥–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç
    —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
    
    Args:
        callback: –û–±—ä–µ–∫—Ç callback query –æ—Ç –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    state_data = await state.get_data()
    collected_containers = state_data.get('collected_containers', {})
    selected_city = state_data.get('selected_city')
    
    # –°–æ–∑–¥–∞—ë–º –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    async for session in get_session():
        for organization, containers_count in collected_containers.items():
            if containers_count > 0:  # –°–æ–∑–¥–∞—ë–º –¥–æ—Å—Ç–∞–≤–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
                delivery_address = MOSCOW_DELIVERY_ADDRESSES.get(organization, {})
                
                delivery = Delivery(
                    organization=organization,
                    total_containers=containers_count,
                    delivery_address=delivery_address.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                    contact_info=delivery_address.get('contact', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                    status='pending'
                )
                session.add(delivery)
        
        await session.commit()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
    route_start_time = datetime.fromisoformat(state_data.get('route_start_time'))
    route_end_time = datetime.now()
    total_time = route_end_time - route_start_time
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ —É–¥–æ–±–Ω—ã–π –≤–∏–¥
    hours = total_time.seconds // 3600
    minutes = (total_time.seconds % 3600) // 60
    time_str = f"{hours}—á {minutes}–º–∏–Ω"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–∞–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞
    completion_message = format_route_summary(
        city=selected_city,
        total_points=len(AVAILABLE_ROUTES[selected_city]),
        collected_containers=collected_containers,
        total_time=time_str
    )
    
    completion_message += "\n\nüìã –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –≤ –ú–æ—Å–∫–≤—É:\n"
    
    for organization, containers_count in collected_containers.items():
        if containers_count > 0:
            address = MOSCOW_DELIVERY_ADDRESSES.get(organization, {}).get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')
            completion_message += f"\nüì¶ <b>{organization}:</b> {containers_count} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\n"
            completion_message += f"üè† –ê–¥—Ä–µ—Å: {address}"
    
    completion_message += "\n\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ."
    
    await callback.message.edit_text(
        text=completion_message,
        reply_markup=None
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.answer(
        "üè† –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞",
        reply_markup=get_main_menu_keyboard()
    )
    
    await callback.answer("–ú–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")


@user_router.message(F.text == "üìä –ú–æ–∏ –º–∞—Ä—à—Ä—É—Ç—ã")
async def my_routes(message: Message) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ route_session_id.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
        stmt = select(RouteProgress).options(
            selectinload(RouteProgress.route),
            selectinload(RouteProgress.photos)
        ).where(
            RouteProgress.user_id == message.from_user.id
        ).order_by(RouteProgress.visited_at.desc())
        
        routes = await session.scalars(stmt)
        routes_list = routes.all()
        
        if not routes_list:
            await message.answer(
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ route_session_id
        routes_summary = {}
        for route_progress in routes_list:
            session_id = route_progress.route_session_id
            date = route_progress.visited_at.strftime("%d.%m.%Y")
            city = route_progress.route.city_name
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º session_id –∫–∞–∫ –∫–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            if session_id not in routes_summary:
                # –ù–∞—Ö–æ–¥–∏–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏ —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
                first_time = min(p.visited_at for p in routes_list if p.route_session_id == session_id)
                time_start = first_time.strftime("%H:%M")
                
                routes_summary[session_id] = {
                    'route_id': session_id,
                    'date': date,
                    'city': city,
                    'time_start': time_start,
                    'progresses': []
                }
            
            routes_summary[session_id]['progresses'].append(route_progress)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –≤ –∫–∞–∂–¥–æ–º –º–∞—Ä—à—Ä—É—Ç–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        for route_info in routes_summary.values():
            route_info['progresses'].sort(key=lambda x: x.visited_at)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        routes_data = []
        for session_id, route_info in list(routes_summary.items())[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
            progresses = route_info['progresses']
            total_containers = sum(p.containers_count for p in progresses)
            points_count = len(progresses)
            
            routes_data.append({
                'route_id': session_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º session_id –∫–∞–∫ route_id
                'date': route_info['date'],
                'city': route_info['city'],
                'points_count': points_count,
                'total_containers': total_containers
            })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = "üìä <b>–í–∞—à–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:</b>\n\n"
        response += "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(
            text=response,
            reply_markup=get_route_selection_keyboard(routes_data)
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@user_router.message()
async def unknown_message(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    
    –ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é —Å –±–æ—Ç–æ–º.
    
    Args:
        message: –û–±—ä–µ–∫—Ç –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    current_state = await state.get_state()
    
    if current_state == RouteStates.waiting_for_photo:
        await message.answer(ERROR_MESSAGES['photo_required'])
    elif current_state == RouteStates.waiting_for_additional_photos:
        await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã—à–µ")
    elif current_state == RouteStates.waiting_for_containers_count:
        await message.answer(ERROR_MESSAGES['invalid_containers_count'])
    elif current_state == RouteStates.waiting_for_comment:
        await message.answer("üìù –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —ç—Ç–æ–π —Ç–æ—á–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)")
    elif current_state == RouteStates.managing_point_data:
        await message.answer("üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∏")
    else:
        await message.answer(
            "ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.",
            reply_markup=get_main_menu_keyboard()
        )


# ==============================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê –ò–°–¢–û–†–ò–ò –ú–ê–†–®–†–£–¢–û–í
# ==============================================

@user_router.callback_query(F.data.startswith("r:"))
async def view_route_details(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
    """
    callback_data = parse_callback(callback.data)
    if not callback_data or callback_data.get('action') != 'view_route':
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    
    session_id = callback_data['route_id']
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ session_id
        stmt = select(RouteProgress).options(
            selectinload(RouteProgress.route),
            selectinload(RouteProgress.photos)
        ).where(
            RouteProgress.route_session_id == session_id
        ).order_by(RouteProgress.visited_at)
        
        progresses = await session.scalars(stmt)
        progresses_list = progresses.all()
        
        if not progresses_list:
            await callback.answer("‚ùå –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞
        await show_route_point_details(callback, progresses_list, 0, session_id)
    
    await callback.answer()


async def show_route_point_details(
    callback: CallbackQuery, 
    progresses_list: list, 
    point_index: int, 
    route_id: str
) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞.
    """
    if point_index >= len(progresses_list):
        await callback.answer("‚ùå –¢–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    progress = progresses_list[point_index]
    route = progress.route
    photos = progress.photos
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ —Ç–æ—á–∫–∏
    message_text = f"üìç <b>–¢–æ—á–∫–∞ {point_index + 1} –∏–∑ {len(progresses_list)}</b>\n\n"
    message_text += f"üè¢ <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</b> {route.organization}\n"
    message_text += f"üìç <b>–ê–¥—Ä–µ—Å:</b> {route.address}\n"
    message_text += f"üì¶ <b>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å–æ–±—Ä–∞–Ω–æ:</b> {progress.containers_count}\n"
    message_text += f"üìÖ <b>–î–∞—Ç–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è:</b> {progress.visited_at.strftime('%d.%m.%Y %H:%M')}\n"
    
    if progress.notes:
        message_text += f"\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {progress.notes}\n"
    
    if photos:
        message_text += f"\nüì∏ <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:</b> {len(photos)} —à—Ç."
    else:
        message_text += f"\nüì∏ <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:</b> –Ω–µ—Ç"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_route_detail_keyboard(
        route_id=route_id,
        current_point_index=point_index,
        total_points=len(progresses_list),
        has_photos=len(photos) > 0
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if callback.message.photo:
        # –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            text=message_text,
            reply_markup=keyboard
        )
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
        await callback.message.edit_text(
            text=message_text,
            reply_markup=keyboard
        )


@user_router.callback_query(F.data.startswith("rp:"))
async def navigate_route_point(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ç–æ—á–∫–∞–º –º–∞—Ä—à—Ä—É—Ç–∞.
    """
    callback_data = parse_callback(callback.data)
    if not callback_data or callback_data.get('action') != 'route_point':
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    
    session_id = callback_data['route_id']
    point_index = callback_data['point_index']
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ session_id
        stmt = select(RouteProgress).options(
            selectinload(RouteProgress.route),
            selectinload(RouteProgress.photos)
        ).where(
            RouteProgress.route_session_id == session_id
        ).order_by(RouteProgress.visited_at)
        
        progresses = await session.scalars(stmt)
        progresses_list = progresses.all()
        
        if not progresses_list:
            await callback.answer("‚ùå –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–æ—á–∫—É
        await show_route_point_details(callback, progresses_list, point_index, session_id)
    
    await callback.answer()


@user_router.callback_query(F.data.startswith("view_photos:"))
async def view_route_photos(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞.
    """
    parts = callback.data.split(":")
    if len(parts) != 3:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    session_id = parts[1]
    point_index = int(parts[2])
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ session_id
        stmt = select(RouteProgress).options(
            selectinload(RouteProgress.route),
            selectinload(RouteProgress.photos)
        ).where(
            RouteProgress.route_session_id == session_id
        ).order_by(RouteProgress.visited_at)
        
        progresses = await session.scalars(stmt)
        progresses_list = progresses.all()
        
        if not progresses_list:
            await callback.answer("‚ùå –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        if point_index >= len(progresses_list):
            await callback.answer("‚ùå –¢–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        progress = progresses_list[point_index]
        photos = progress.photos
        
        if not photos:
            await callback.answer("‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ—Ç", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        await show_route_photo(callback, photos, 0, session_id, point_index)
    
    await callback.answer()


async def show_route_photo(
    callback: CallbackQuery, 
    photos: list, 
    photo_index: int, 
    route_id: str, 
    point_index: int
) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞.
    """
    if photo_index >= len(photos):
        await callback.answer("‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    photo = photos[photo_index]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º
    keyboard = get_photos_viewer_keyboard(
        route_id=route_id,
        point_index=point_index,
        current_photo_index=photo_index,
        total_photos=len(photos)
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –ø–æ–¥–ø–∏—Å—å—é
    caption = f"üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è {photo_index + 1} –∏–∑ {len(photos)}"
    
    await callback.message.answer_photo(
        photo=photo.photo_file_id,
        caption=caption,
        reply_markup=keyboard
    )


@user_router.callback_query(F.data.startswith("p:"))
async def navigate_route_photo(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞.
    """
    callback_data = parse_callback(callback.data)
    if not callback_data or callback_data.get('action') != 'view_photo':
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    
    session_id = callback_data['route_id']
    point_index = callback_data['point_index']
    photo_index = callback_data['photo_index']
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ session_id
        stmt = select(RouteProgress).options(
            selectinload(RouteProgress.photos)
        ).where(
            RouteProgress.route_session_id == session_id
        ).order_by(RouteProgress.visited_at)
        
        progresses = await session.scalars(stmt)
        progresses_list = progresses.all()
        
        if not progresses_list:
            await callback.answer("‚ùå –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        if point_index >= len(progresses_list):
            await callback.answer("‚ùå –¢–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        progress = progresses_list[point_index]
        photos = progress.photos
        
        if not photos:
            await callback.answer("‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ—Ç", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        await show_route_photo(callback, photos, photo_index, session_id, point_index)
    
    await callback.answer()


@user_router.callback_query(F.data == "back_to_routes")
async def back_to_routes(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –º–∞—Ä—à—Ä—É—Ç–æ–≤.
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
        stmt = select(RouteProgress).options(
            selectinload(RouteProgress.route),
            selectinload(RouteProgress.photos)
        ).where(
            RouteProgress.user_id == callback.from_user.id
        ).order_by(RouteProgress.visited_at.desc())
        
        routes = await session.scalars(stmt)
        routes_list = routes.all()
        
        if not routes_list:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ–º
            if callback.message.photo:
                await callback.message.answer(
                    "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤",
                    reply_markup=get_main_menu_keyboard()
                )
            else:
                await callback.message.edit_text(
                    "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤",
                    reply_markup=get_main_menu_keyboard()
                )
            await callback.answer()
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ route_session_id
        routes_summary = {}
        for route_progress in routes_list:
            session_id = route_progress.route_session_id
            date = route_progress.visited_at.strftime("%d.%m.%Y")
            city = route_progress.route.city_name
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º session_id –∫–∞–∫ –∫–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            if session_id not in routes_summary:
                # –ù–∞—Ö–æ–¥–∏–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏ —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
                first_time = min(p.visited_at for p in routes_list if p.route_session_id == session_id)
                time_start = first_time.strftime("%H:%M")
                
                routes_summary[session_id] = {
                    'route_id': session_id,
                    'date': date,
                    'city': city,
                    'time_start': time_start,
                    'progresses': []
                }
            
            routes_summary[session_id]['progresses'].append(route_progress)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –≤ –∫–∞–∂–¥–æ–º –º–∞—Ä—à—Ä—É—Ç–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        for route_info in routes_summary.values():
            route_info['progresses'].sort(key=lambda x: x.visited_at)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        routes_data = []
        for session_id, route_info in list(routes_summary.items())[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
            progresses = route_info['progresses']
            total_containers = sum(p.containers_count for p in progresses)
            points_count = len(progresses)
            
            routes_data.append({
                'route_id': session_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º session_id –∫–∞–∫ route_id
                'date': route_info['date'],
                'city': route_info['city'],
                'points_count': points_count,
                'total_containers': total_containers
            })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = "üìä <b>–í–∞—à–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:</b>\n\n"
        response += "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ–º
        if callback.message.photo:
            # –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(
                text=response,
                reply_markup=get_route_selection_keyboard(routes_data)
            )
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
            await callback.message.edit_text(
                text=response,
                reply_markup=get_route_selection_keyboard(routes_data)
            )
    
    await callback.answer()


@user_router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ ReplyKeyboardMarkup –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å edit_text
    await callback.message.answer(
        text="üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )
    
    await callback.answer()
