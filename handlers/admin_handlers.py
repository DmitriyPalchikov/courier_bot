"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –¥–µ–π—Å—Ç–≤–∏–π.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ
–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–æ—Ç–∞, –≤–∫–ª—é—á–∞—è –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã.
"""

import logging

import os
from datetime import datetime, timedelta
from typing import Optional

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile, InputMediaPhoto
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from database.database import get_session
from database.models import User, Route, RouteProgress, Delivery
from sqlalchemy import select, and_
from keyboards.admin_keyboards import (
    get_admin_menu_keyboard,
    get_statistics_keyboard,
    get_export_keyboard,
    get_settings_keyboard,
    get_period_selection_keyboard,
    get_warehouse_keyboard,
    get_routes_monitoring_keyboard,
    get_route_details_keyboard,
    get_city_selection_keyboard,
    get_admin_route_selection_keyboard,
    get_admin_route_detail_keyboard,
    get_admin_photos_viewer_keyboard
)
from utils.statistics import (
    get_route_statistics,
    get_user_performance,
    get_busiest_days,
    format_statistics_message
)
from utils.report_generator import generate_excel_report, generate_pdf_report
from utils.warehouse_manager import WarehouseManager
from utils.route_monitor import RouteMonitor
from config import ADMIN_IDS

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
admin_router = Router(name='admin_router')

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    return user_id in ADMIN_IDS


@admin_router.message(Command("admin"))
async def cmd_admin(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin.
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.
    """
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    await message.answer(
        "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_admin_menu_keyboard()
    )


@admin_router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics_menu(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    await message.answer(
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=get_statistics_keyboard()
    )


@admin_router.callback_query(F.data.startswith("stats_"))
async def process_statistics_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    action = callback.data.split("_")[1]
    
    async for session in get_session():
        if action == "general":
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await get_route_statistics(session)
            message = format_statistics_message(stats)
            await callback.message.edit_text(
                message,
                reply_markup=get_statistics_keyboard()
            )
            
        elif action == "couriers":
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—É—Ä—å–µ—Ä–æ–≤
            performers = await get_user_performance(session, limit=10)
            
            message = "üë• <b>–¢–æ–ø –∫—É—Ä—å–µ—Ä–æ–≤:</b>\n\n"
            for i, user in enumerate(performers, 1):
                message += (
                    f"{i}. @{user['username']}\n"
                    f"üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {user['total_containers']}\n"
                    f"üöö –ú–∞—Ä—à—Ä—É—Ç–æ–≤: {user['total_routes']}\n"
                    f"üìä –°—Ä–µ–¥–Ω–µ–µ: {user['avg_boxes_per_route']:.1f} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤/–º–∞—Ä—à—Ä—É—Ç\n\n"
                )
            
            await callback.message.edit_text(
                message,
                reply_markup=get_statistics_keyboard()
            )
            
        elif action in ["today", "week", "month"]:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
            days = {
                "today": 1,
                "week": 7,
                "month": 30
            }[action]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥
            stats = await get_route_statistics(session, days=days)
            busiest = await get_busiest_days(session, days=days, limit=5)
            
            message = format_statistics_message(stats)
            message += "\n\nüìÖ <b>–°–∞–º—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–Ω–∏:</b>\n"
            
            for day in busiest:
                message += (
                    f"\n{day['date']}:\n"
                    f"üöö –ú–∞—Ä—à—Ä—É—Ç–æ–≤: {day['total_routes']}\n"
                    f"üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {day['total_containers']}\n"
                )
            
            await callback.message.edit_text(
                message,
                reply_markup=get_statistics_keyboard()
            )
            
        elif action == "routes":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_data "stats_routes_monitoring"
            if callback.data == "stats_routes_monitoring":
                logger.info(f"üõ£Ô∏è –ú–û–ù–ò–¢–û–†–ò–ù–ì –ú–ê–†–®–†–£–¢–û–í: –í—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
                await callback.message.edit_text(
                    "üõ£Ô∏è <b>–ú–û–ù–ò–¢–û–†–ò–ù–ì –ú–ê–†–®–†–£–¢–û–í</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                    reply_markup=get_routes_monitoring_keyboard()
                )
                return
        
        elif action == "refresh":
            # –ü—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await get_route_statistics(session)
            message = format_statistics_message(stats)
            await callback.message.edit_text(
                message,
                reply_markup=get_statistics_keyboard()
            )
            
        elif action == "close":
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            await callback.message.delete()
    
    await callback.answer()


@admin_router.message(F.text == "üì• –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤")
async def show_export_menu(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤."""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    await message.answer(
        "üì• –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞:",
        reply_markup=get_export_keyboard()
    )


@admin_router.callback_query(F.data.startswith("export_"))
async def process_export_callback(callback: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    action = callback.data.split("_")[1]
    
    if action == "select_period":
        await callback.message.edit_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:",
            reply_markup=get_period_selection_keyboard()
        )
    
    elif action in ["excel", "pdf"]:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–∏–æ–¥–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        start_date = data.get('report_start_date')
        end_date = data.get('report_end_date')
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –¥–∞—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if start_date:
            start_date = datetime.fromisoformat(start_date)
        if end_date:
            end_date = datetime.fromisoformat(end_date)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            progress_message = await callback.message.answer(
                "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞..."
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            async for session in get_session():
                if action == "excel":
                    filepath = await generate_excel_report(
                        session,
                        start_date=start_date,
                        end_date=end_date
                    )
                else:  # pdf
                    filepath = await generate_pdf_report(
                        session,
                        start_date=start_date,
                        end_date=end_date
                    )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            file = FSInputFile(filepath)
            await bot.send_document(
                chat_id=callback.from_user.id,
                document=file,
                caption="üìä –í–∞—à –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!"
            )
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            os.remove(filepath)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            await progress_message.delete()
            
        except ImportError:
            await callback.answer(
                "‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install openpyxl reportlab pandas",
                show_alert=True
            )
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            await callback.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞",
                show_alert=True
            )
            return
    
    elif action == "close":
        await callback.message.delete()
    
    await callback.answer()


@admin_router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings_menu(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    await message.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:",
        reply_markup=get_settings_keyboard()
    )


@admin_router.callback_query(F.data.startswith("period_"))
async def process_period_callback(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    action = callback.data.split("_")[1]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    
    if action == "today":
        start_date = today
        end_date = today + timedelta(days=1)
    elif action == "yesterday":
        start_date = today - timedelta(days=1)
        end_date = today
    elif action == "week":
        start_date = today - timedelta(days=7)
        end_date = today + timedelta(days=1)
    elif action == "month":
        start_date = today - timedelta(days=30)
        end_date = today + timedelta(days=1)
    elif action == "custom":
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        await callback.answer(
            "üöß –í—ã–±–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            show_alert=True
        )
        return
    elif action == "cancel":
        await state.update_data(report_start_date=None, report_end_date=None)
        await callback.message.edit_text(
            "üì• –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞:",
            reply_markup=get_export_keyboard()
        )
        await callback.answer()
        return
    else:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        report_start_date=start_date.isoformat(),
        report_end_date=end_date.isoformat()
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ
    period_info = f"—Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}"
    await callback.message.edit_text(
        f"üì• –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤\n\n"
        f"üìÖ –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {period_info}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞:",
        reply_markup=get_export_keyboard()
    )
    
    await callback.answer()


@admin_router.callback_query(F.data.startswith("settings_"))
async def process_settings_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    action = callback.data.split("_")[1]
    
    if action in ["couriers", "routes"]:
        await callback.answer(
            "üöß –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            show_alert=True
        )
    
    elif action == "backup":
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs("backups", exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –±—ç–∫–∞–ø–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = f"backups/courier_bot_{timestamp}.db"
        
        try:
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            import shutil
            shutil.copy2("courier_bot.db", backup_path)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞
            file = FSInputFile(backup_path)
            await callback.message.answer_document(
                document=file,
                caption=f"üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç {timestamp}"
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(backup_path)
            
            await callback.answer(
                "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
                show_alert=True
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            await callback.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏",
                show_alert=True
            )
    
    elif action == "close":
        await callback.message.delete()
    
    await callback.answer()


@admin_router.message(F.text == "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏")
async def show_active_deliveries(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫ –≤ –ú–æ—Å–∫–≤—É."""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏
        deliveries = await session.execute(
            select(Delivery)
            .filter(Delivery.status.in_(['pending', 'in_progress']))
            .order_by(Delivery.delivery_date)
        )
        deliveries = deliveries.scalars().all()
        
        if not deliveries:
            await message.answer(
                "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫ –≤ –ú–æ—Å–∫–≤—É",
                reply_markup=get_admin_menu_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = "üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ú–æ—Å–∫–≤—É:</b>\n\n"
        
        for delivery in deliveries:
            status_emoji = "üïí" if delivery.status == "pending" else "üöö"
            message_text += (
                f"{status_emoji} <b>–î–æ—Å—Ç–∞–≤–∫–∞ #{delivery.id}</b>\n"
                f"üì¶ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {delivery.organization}\n"
                f"üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {delivery.total_containers}\n"
                f"üìç –ê–¥—Ä–µ—Å: {delivery.delivery_address}\n"
                f"üì± –ö–æ–Ω—Ç–∞–∫—Ç: {delivery.contact_info}\n"
                f"üìÖ –î–∞—Ç–∞: {delivery.delivery_date.strftime('%d.%m.%Y %H:%M')}\n\n"
            )
        
        await message.answer(
            message_text,
            reply_markup=get_admin_menu_keyboard()
        )


@admin_router.message(F.text == "üè¢ –°–∫–ª–∞–¥ –Ø—Ä–æ—Å–ª–∞–≤–ª—å")
async def show_warehouse_menu(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å–∫–ª–∞–¥–∞ –≤ –Ø—Ä–æ—Å–ª–∞–≤–ª–µ."""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    await message.answer(
        "üè¢ <b>–°–∫–ª–∞–¥ –Ø—Ä–æ—Å–ª–∞–≤–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=get_warehouse_keyboard()
    )


@admin_router.callback_query(F.data.startswith("warehouse_"))
async def process_warehouse_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é —Å–∫–ª–∞–¥–∞."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–≤—Å–µ —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ "_")
    parts = callback.data.split("_")
    if len(parts) >= 2:
        action = "_".join(parts[1:])  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ "warehouse"
    else:
        action = callback.data
    
    try:
        if action == "status" or action == "refresh":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∫–ª–∞–¥–∞
            warehouse_stats = await WarehouseManager.get_warehouse_status()
            message = WarehouseManager.format_warehouse_status_message(warehouse_stats)
            
            await callback.message.edit_text(
                message,
                reply_markup=get_warehouse_keyboard()
            )
            
        elif action in ["today", "week", "month"]:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥
            days = {
                "today": 1,
                "week": 7,
                "month": 30
            }[action]
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞—Ö
            incoming_data = await WarehouseManager.get_incoming_containers_by_period(days)
            outgoing_data = await WarehouseManager.get_outgoing_deliveries_by_period(days)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = WarehouseManager.format_period_summary_message(incoming_data, outgoing_data)
            
            await callback.message.edit_text(
                message,
                reply_markup=get_warehouse_keyboard()
            )
            
        elif action == "create_moscow_route":
            # –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –≤ –ú–æ—Å–∫–≤—É
            try:
                route_info = await WarehouseManager.create_moscow_route(callback.from_user.id)
                
                if route_info['success']:
                    # –û—á–∏—â–∞–µ–º —Å–∫–ª–∞–¥ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
                    await WarehouseManager.clear_warehouse_after_route_creation()
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = WarehouseManager.format_moscow_route_creation_message(route_info)
                
                await callback.message.edit_text(
                    message,
                    reply_markup=get_warehouse_keyboard()
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ú–æ—Å–∫–≤—É: {e}")
                await callback.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞",
                    show_alert=True
                )
                return
        
        elif action == "close":
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–∫–ª–∞–¥–æ–º
            await callback.message.delete()
            
        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
            return
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫–ª–∞–¥–∞: {e}")
        await callback.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–∞",
            show_alert=True
        )
        return
    
    await callback.answer()


@admin_router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def return_to_main_menu(message: Message) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞."""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    from keyboards.user_keyboards import get_main_menu_keyboard
    
    await message.answer(
        "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_menu_keyboard()
    )


# ================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ú–ê–†–®–†–£–¢–û–í
# ================================


@admin_router.callback_query(F.data == "routes_active")
async def show_active_routes(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    await callback.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã...")
    
    active_routes = await RouteMonitor.get_active_route_sessions()
    
    if not active_routes:
        await callback.message.edit_text(
            "üèÉ‚Äç‚ôÇÔ∏è –ê–ö–¢–ò–í–ù–´–ï –ú–ê–†–®–†–£–¢–´\n\n"
            "‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=get_routes_monitoring_keyboard()
        )
        return
    
    message_text = f"üèÉ‚Äç‚ôÇÔ∏è –ê–ö–¢–ò–í–ù–´–ï –ú–ê–†–®–†–£–¢–´ ({len(active_routes)})\n\n"
    message_text += "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    routes_data = []
    for route in active_routes:
        routes_data.append({
            'route_id': route.session_id,
            'date': route.start_time.strftime('%d.%m'),
            'city': route.city_name,
            'username': route.username,
            'points_count': route.total_points,
            'total_containers': route.total_containers,
            'status': route.status
        })
    
    keyboard = get_admin_route_selection_keyboard(routes_data)
    
    await callback.message.edit_text(
        message_text,
        reply_markup=keyboard
    )


@admin_router.callback_query(F.data == "routes_completed")
async def show_completed_routes(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    await callback.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã...")
    
    completed_routes = await RouteMonitor.get_completed_route_sessions(days=7)
    
    if not completed_routes:
        await callback.message.edit_text(
            "‚úÖ –ó–ê–í–ï–†–®–ï–ù–ù–´–ï –ú–ê–†–®–†–£–¢–´\n\n"
            "‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=get_routes_monitoring_keyboard()
        )
        return
    
    message_text = f"‚úÖ –ó–ê–í–ï–†–®–ï–ù–ù–´–ï –ú–ê–†–®–†–£–¢–´ ({len(completed_routes)})\n\n"
    message_text += "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    routes_data = []
    for route in completed_routes[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
        routes_data.append({
            'route_id': route.session_id,
            'date': route.last_activity.strftime('%d.%m'),
            'city': route.city_name,
            'username': route.username,
            'points_count': route.total_points,
            'total_containers': route.total_containers,
            'status': 'completed'
        })
    
    keyboard = get_admin_route_selection_keyboard(routes_data, has_more=(len(completed_routes) > 20))
    
    await callback.message.edit_text(
        message_text,
        reply_markup=keyboard
    )


@admin_router.callback_query(F.data == "routes_summary")
async def show_routes_summary(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å–≤–æ–¥–∫—É –ø–æ –º–∞—Ä—à—Ä—É—Ç–∞–º."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    await callback.answer("üîÑ –§–æ—Ä–º–∏—Ä—É—é —Å–≤–æ–¥–∫—É...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        all_routes = await RouteMonitor.get_active_route_sessions()
        completed_routes = await RouteMonitor.get_completed_route_sessions(days=7)
        moscow_routes = await RouteMonitor.get_moscow_routes()
        cities = await RouteMonitor.get_available_cities()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        active_count = len([r for r in all_routes if r.status == 'active'])
        paused_count = len([r for r in all_routes if r.status == 'paused'])
        inactive_count = len([r for r in all_routes if r.status == 'inactive'])
        completed_count = len(completed_routes)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–æ–¥–∞–º (—Ç–æ–ø-5)
        city_stats = {}
        for route in all_routes + completed_routes:
            city = route.city_name
            if city not in city_stats:
                city_stats[city] = {'count': 0, 'containers': 0}
            city_stats[city]['count'] += 1
            city_stats[city]['containers'] += route.total_containers
        
        top_cities = sorted(city_stats.items(), key=lambda x: x[1]['count'], reverse=True)[:5]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = "üìä <b>–°–í–û–î–ö–ê –ü–û –ú–ê–†–®–†–£–¢–ê–ú</b>\n\n"
        
        message_text += "üìà <b>–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>\n"
        message_text += f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {active_count}\n"
        message_text += f"üü° –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ: {paused_count}\n"
        message_text += f"‚ö™ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ: {inactive_count}\n"
        message_text += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ (7–¥): {completed_count}\n\n"
        
        message_text += f"üöö <b>–ú–∞—Ä—à—Ä—É—Ç—ã –≤ –ú–æ—Å–∫–≤—É:</b> {len(moscow_routes)}\n\n"
        
        message_text += "üèôÔ∏è <b>–¢–æ–ø –≥–æ—Ä–æ–¥–æ–≤:</b>\n"
        for i, (city, stats) in enumerate(top_cities, 1):
            message_text += f"{i}. {city}: {stats['count']} –º–∞—Ä—à—Ä., {stats['containers']} –∫–æ–Ω—Ç.\n"
        
        message_text += f"\nüìç <b>–í—Å–µ–≥–æ –≥–æ—Ä–æ–¥–æ–≤:</b> {len(cities)}\n"
        message_text += f"üì¶ <b>–í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤:</b> {len(all_routes) + completed_count}"
        
        await callback.message.edit_text(
            message_text,
            reply_markup=get_routes_monitoring_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏", show_alert=True)


@admin_router.callback_query(F.data == "routes_by_cities")
async def show_cities_selection(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    cities = await RouteMonitor.get_available_cities()
    
    if not cities:
        await callback.message.edit_text(
            "üõ£Ô∏è <b>–ú–ê–†–®–†–£–¢–´ –ü–û –ì–û–†–û–î–ê–ú</b>\n\n"
            "‚ùå –ì–æ—Ä–æ–¥–æ–≤ —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=get_routes_monitoring_keyboard()
        )
        return
    
    await callback.message.edit_text(
        "üõ£Ô∏è <b>–í–´–ë–ï–†–ò–¢–ï –ì–û–†–û–î</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤:",
        reply_markup=get_city_selection_keyboard(cities)
    )
    await callback.answer()


@admin_router.callback_query(F.data.startswith("city_routes:"))
async def show_city_routes(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≥–æ—Ä–æ–¥—É."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    city_name = callback.data.split(":", 1)[1]
    await callback.answer(f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è {city_name}...")
    
    city_routes = await RouteMonitor.get_routes_by_city(city_name)
    
    if not city_routes:
        cities = await RouteMonitor.get_available_cities()
        await callback.message.edit_text(
            f"üìç <b>–ú–ê–†–®–†–£–¢–´: {city_name.upper()}</b>\n\n"
            f"‚ùå –ú–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ –≥–æ—Ä–æ–¥–µ {city_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=get_city_selection_keyboard(cities)
        )
        return
    
    message_text = f"üìç <b>–ú–ê–†–®–†–£–¢–´: {city_name.upper()}</b> ({len(city_routes)})\n\n"
    message_text += "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    routes_data = []
    for route in city_routes[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
        routes_data.append({
            'route_id': route.session_id,
            'date': route.last_activity.strftime('%d.%m') if route.status == 'completed' else route.start_time.strftime('%d.%m'),
            'city': route.city_name,
            'username': route.username,
            'points_count': route.total_points,
            'total_containers': route.total_containers,
            'status': route.status
        })
    
    keyboard = get_admin_route_selection_keyboard(routes_data, has_more=(len(city_routes) > 20))
    
    await callback.message.edit_text(
        message_text,
        reply_markup=keyboard
    )


@admin_router.callback_query(F.data == "routes_moscow")
async def show_moscow_routes(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –≤ –ú–æ—Å–∫–≤—É."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    await callback.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –º–∞—Ä—à—Ä—É—Ç—ã –≤ –ú–æ—Å–∫–≤—É...")
    
    moscow_routes = await RouteMonitor.get_moscow_routes()
    
    if not moscow_routes:
        await callback.message.edit_text(
            "üöö <b>–ú–ê–†–®–†–£–¢–´ –í –ú–û–°–ö–í–£</b>\n\n"
            "‚ùå –ú–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ –ú–æ—Å–∫–≤—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=get_routes_monitoring_keyboard()
        )
        return
    
    message_text = f"üöö <b>–ú–ê–†–®–†–£–¢–´ –í –ú–û–°–ö–í–£</b> ({len(moscow_routes)})\n\n"
    message_text += "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    routes_data = []
    for route in moscow_routes[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
        status_emoji = {
            'available': 'üü¢',
            'in_progress': 'üü°', 
            'completed': '‚úÖ'
        }.get(route.status, '‚ö™')
        
        routes_data.append({
            'route_id': f"moscow_{route.route_id}",  # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Ä–∞–∑–ª–∏—á–∏—è
            'date': route.created_at.strftime('%d.%m'),
            'city': '–ú–æ—Å–∫–≤–∞',
            'username': route.courier_username or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω',
            'points_count': route.points_count,
            'total_containers': route.total_containers,
            'status': route.status
        })
    
    keyboard = get_admin_route_selection_keyboard(routes_data, has_more=(len(moscow_routes) > 20))
    
    await callback.message.edit_text(
        message_text,
        reply_markup=keyboard
    )


@admin_router.callback_query(F.data == "routes_refresh")
async def refresh_routes_monitoring(callback: CallbackQuery) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ...")
    await callback.message.edit_text(
        "üõ£Ô∏è <b>–ú–û–ù–ò–¢–û–†–ò–ù–ì –ú–ê–†–®–†–£–¢–û–í</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=get_routes_monitoring_keyboard()
    )


@admin_router.callback_query(F.data == "routes_close")
async def close_routes_monitoring(callback: CallbackQuery) -> None:
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ä—à—Ä—É—Ç–æ–≤."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=get_statistics_keyboard()
    )
    await callback.answer()


@admin_router.callback_query(F.data == "routes_monitoring_back")
async def back_to_routes_monitoring(callback: CallbackQuery) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üõ£Ô∏è <b>–ú–û–ù–ò–¢–û–†–ò–ù–ì –ú–ê–†–®–†–£–¢–û–í</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=get_routes_monitoring_keyboard()
    )
    await callback.answer()


# ===============================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–ï–¢–ê–õ–¨–ù–û–ì–û –ü–†–û–°–ú–û–¢–†–ê –ú–ê–†–®–†–£–¢–û–í
# ===============================================

@admin_router.callback_query(F.data.startswith("admin_route:"))
async def admin_view_route_details(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞).
    """
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    route_hash = callback.data.split(":", 1)[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π route_id –ø–æ —Ö–µ—à—É
    from keyboards.admin_keyboards import get_route_id_by_hash
    session_id = get_route_id_by_hash(route_hash)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –º–∞—Ä—à—Ä—É—Ç –≤ –ú–æ—Å–∫–≤—É –∏–ª–∏ –æ–±—ã—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
    if session_id.startswith("moscow_"):
        # –≠—Ç–æ –º–∞—Ä—à—Ä—É—Ç –≤ –ú–æ—Å–∫–≤—É
        moscow_route_id = int(session_id.split("_", 1)[1])
        await admin_view_moscow_route_details(callback, moscow_route_id)
        return
    
    # –û–±—ã—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ session_id (–∏—Å–∫–ª—é—á–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
        from sqlalchemy.orm import selectinload
        from database.models import RouteProgress
        
        stmt = select(RouteProgress).options(
            selectinload(RouteProgress.route),
            selectinload(RouteProgress.photos)
        ).where(
            and_(
                RouteProgress.route_session_id == session_id,
                RouteProgress.notes.notlike('%–ò–¢–û–ì–û–í–´–ô_–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô%'),
                RouteProgress.notes.notlike('%–õ–ê–ë–û–†–ê–¢–û–†–ù–´–ï_–î–ê–ù–ù–´–ï%')
            )
        ).order_by(RouteProgress.visited_at)
        
        progresses = await session.scalars(stmt)
        progresses_list = progresses.all()
        
        if not progresses_list:
            await callback.answer("‚ùå –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞
        await admin_show_route_point_details(callback, progresses_list, 0, session_id)
    
    await callback.answer()


async def admin_view_moscow_route_details(callback: CallbackQuery, moscow_route_id: int) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ú–æ—Å–∫–≤—É.
    """
    async for session in get_session():
        from database.models import MoscowRoute, MoscowRoutePoint
        from sqlalchemy.orm import selectinload
        
        from database.models import User
        
        stmt = select(MoscowRoute).options(
            selectinload(MoscowRoute.route_points)
        ).where(MoscowRoute.id == moscow_route_id)
        
        moscow_route = await session.scalar(stmt)
        
        if not moscow_route:
            await callback.answer("‚ùå –ú–∞—Ä—à—Ä—É—Ç –≤ –ú–æ—Å–∫–≤—É –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫—É—Ä—å–µ—Ä–∞
        courier_name = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        if moscow_route.courier_id:
            courier = await session.scalar(
                select(User).where(User.telegram_id == moscow_route.courier_id)
            )
            if courier:
                courier_name = courier.username or f"User_{courier.telegram_id}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞
        message_text = f"üöö <b>–ú–ê–†–®–†–£–¢ –í –ú–û–°–ö–í–£ #{moscow_route.id}</b>\n\n"
        
        message_text += f"üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {moscow_route.route_name}\n"
        message_text += f"üë§ <b>–ö—É—Ä—å–µ—Ä:</b> {courier_name}\n"
        message_text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {moscow_route.status}\n"
        message_text += f"üìç <b>–¢–æ—á–µ–∫:</b> {len(moscow_route.route_points)}\n"
        message_text += f"üïê <b>–°–æ–∑–¥–∞–Ω:</b> {moscow_route.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        
        if moscow_route.started_at:
            message_text += f"üöÄ <b>–ù–∞—á–∞—Ç:</b> {moscow_route.started_at.strftime('%d.%m.%Y %H:%M')}\n"
        
        if moscow_route.completed_at:
            message_text += f"‚úÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω:</b> {moscow_route.completed_at.strftime('%d.%m.%Y %H:%M')}\n"
        
        message_text += f"\nüì¶ <b>–¢–æ—á–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:</b>\n"
        
        total_containers = 0
        for i, point in enumerate(moscow_route.route_points, 1):
            total_containers += point.containers_to_deliver
            delivered_containers = point.containers_delivered or 0
            
            status_emoji = "‚úÖ" if point.status == 'completed' else "‚è≥"
            message_text += (
                f"\n{status_emoji} <b>{i}. {point.organization}</b>\n"
                f"üìç {point.point_name}\n"
                f"üì¶ {delivered_containers}/{point.containers_to_deliver} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\n"
            )
        
        message_text += f"\nüì¶ <b>–í—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:</b> {total_containers}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        from keyboards.admin_keyboards import get_routes_monitoring_keyboard
        keyboard = get_routes_monitoring_keyboard()
        
        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard
        )


async def admin_show_route_point_details(
    callback: CallbackQuery, 
    progresses_list: list, 
    point_index: int, 
    route_id: str
) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞).
    """
    if point_index >= len(progresses_list):
        await callback.answer("‚ùå –¢–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    progress = progresses_list[point_index]
    route = progress.route
    photos = progress.photos
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ —Ç–æ—á–∫–∏
    message_text = f"üìç <b>–¢–û–ß–ö–ê {point_index + 1} –∏–∑ {len(progresses_list)}</b>\n\n"
    
    message_text += f"üè¢ <b>{route.organization}</b>\n"
    message_text += f"üìç {route.point_name}\n"
    message_text += f"üèôÔ∏è {route.city_name}\n"
    message_text += f"üìç {route.address}\n\n"
    
    message_text += f"üì¶ <b>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:</b> {progress.containers_count}\n"
    message_text += f"üìÖ <b>–í—Ä–µ–º—è:</b> {progress.visited_at.strftime('%d.%m.%Y %H:%M')}\n"
    message_text += f"üì∏ <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:</b> {len(photos)}\n"
    message_text += f"‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> {progress.status}\n\n"
    
    if progress.notes:
        message_text += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n{progress.notes}\n\n"
    
    message_text += f"üÜî <b>–°–µ—Å—Å–∏—è:</b> <code>{route_id}</code>"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    has_lab_data = any("–õ–ê–ë–û–†–ê–¢–û–†–ù–´–ï_–î–ê–ù–ù–´–ï" in p.notes or "–ò–¢–û–ì–û–í–´–ô_–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô" in p.notes 
                      for p in progresses_list if p.notes)
    
    keyboard = get_admin_route_detail_keyboard(
        route_id=route_id,
        current_point_index=point_index,
        total_points=len(progresses_list),
        has_photos=len(photos) > 0,
        has_lab_data=has_lab_data
    )
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        if callback.message.photo:
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(
                text=message_text,
                reply_markup=keyboard
            )
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
            try:
                await callback.message.delete()
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
            await callback.message.edit_text(
                text=message_text,
                reply_markup=keyboard
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        logger.error(f"Route ID: {route_id}, Point index: {point_index}, Total points: {len(progresses_list)}")
        # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.answer(
                text=message_text,
                reply_markup=keyboard
            )
            await callback.answer("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        except Exception as fallback_error:
            logger.error(f"Fallback —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {fallback_error}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π —Ç–æ—á–∫–∏")


@admin_router.callback_query(F.data.startswith("admin_route_point:"))
async def admin_navigate_route_point(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ç–æ—á–∫–∞–º –º–∞—Ä—à—Ä—É—Ç–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞).
    """
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    parts = callback.data.split(":")
    if len(parts) != 3:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    route_hash = parts[1]
    point_index = int(parts[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π route_id –ø–æ —Ö–µ—à—É
    from keyboards.admin_keyboards import get_route_id_by_hash
    session_id = get_route_id_by_hash(route_hash)
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ session_id
        from sqlalchemy.orm import selectinload
        from database.models import RouteProgress
        
        stmt = select(RouteProgress).options(
            selectinload(RouteProgress.route),
            selectinload(RouteProgress.photos)
        ).where(
            and_(
                RouteProgress.route_session_id == session_id,
                RouteProgress.notes.notlike('%–ò–¢–û–ì–û–í–´–ô_–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô%'),
                RouteProgress.notes.notlike('%–õ–ê–ë–û–†–ê–¢–û–†–ù–´–ï_–î–ê–ù–ù–´–ï%')
            )
        ).order_by(RouteProgress.visited_at)
        
        progresses = await session.scalars(stmt)
        progresses_list = progresses.all()
        
        if not progresses_list:
            await callback.answer("‚ùå –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–æ—á–∫—É
        await admin_show_route_point_details(callback, progresses_list, point_index, session_id)
    
    await callback.answer()


@admin_router.callback_query(F.data.startswith("admin_view_photos:"))
async def admin_view_route_photos(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞).
    """
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    parts = callback.data.split(":")
    if len(parts) != 3:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    route_hash = parts[1]
    point_index = int(parts[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π route_id –ø–æ —Ö–µ—à—É
    from keyboards.admin_keyboards import get_route_id_by_hash
    session_id = get_route_id_by_hash(route_hash)
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ session_id (–∏—Å–∫–ª—é—á–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
        from sqlalchemy.orm import selectinload
        from database.models import RouteProgress
        
        stmt = select(RouteProgress).options(
            selectinload(RouteProgress.route),
            selectinload(RouteProgress.photos)
        ).where(
            and_(
                RouteProgress.route_session_id == session_id,
                RouteProgress.notes.notlike('%–ò–¢–û–ì–û–í–´–ô_–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô%'),
                RouteProgress.notes.notlike('%–õ–ê–ë–û–†–ê–¢–û–†–ù–´–ï_–î–ê–ù–ù–´–ï%')
            )
        ).order_by(RouteProgress.visited_at)
        
        progresses = await session.scalars(stmt)
        progresses_list = progresses.all()
        
        if not progresses_list:
            await callback.answer("‚ùå –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        if point_index >= len(progresses_list):
            await callback.answer("‚ùå –¢–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        progress = progresses_list[point_index]
        photos = progress.photos
        
        if not photos:
            await callback.answer("‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ—Ç", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        await admin_show_route_photo(callback, photos, 0, session_id, point_index)
    
    await callback.answer()


async def admin_show_route_photo(
    callback: CallbackQuery, 
    photos: list, 
    photo_index: int, 
    route_id: str, 
    point_index: int
) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞).
    """
    if photo_index >= len(photos):
        await callback.answer("‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    photo = photos[photo_index]
    
    caption = (
        f"üì∏ <b>–§–æ—Ç–æ {photo_index + 1} –∏–∑ {len(photos)}</b>\n\n"
        f"üìÖ {photo.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"üÜî –°–µ—Å—Å–∏—è: `{route_id}`"
    )
    
    keyboard = get_admin_photos_viewer_keyboard(
        route_id=route_id,
        point_index=point_index,
        current_photo_index=photo_index,
        total_photos=len(photos)
    )
    
    try:
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –º–µ–¥–∏–∞
        if callback.message.photo:
            await callback.message.edit_media(
                media=InputMediaPhoto(
                    media=photo.file_id,
                    caption=caption
                ),
                reply_markup=keyboard
            )
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
            await callback.message.answer_photo(
                photo=photo.file_id,
                caption=caption,
                reply_markup=keyboard
            )
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.message.delete()
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ñ–æ—Ç–æ: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")


@admin_router.callback_query(F.data.startswith("admin_photo:"))
async def admin_navigate_route_photo(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞).
    """
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    parts = callback.data.split(":")
    if len(parts) != 4:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    route_hash = parts[1]
    point_index = int(parts[2])
    photo_index = int(parts[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π route_id –ø–æ —Ö–µ—à—É
    from keyboards.admin_keyboards import get_route_id_by_hash
    session_id = get_route_id_by_hash(route_hash)
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ session_id (–∏—Å–∫–ª—é—á–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
        from sqlalchemy.orm import selectinload
        from database.models import RouteProgress
        
        stmt = select(RouteProgress).options(
            selectinload(RouteProgress.photos)
        ).where(
            and_(
                RouteProgress.route_session_id == session_id,
                RouteProgress.notes.notlike('%–ò–¢–û–ì–û–í–´–ô_–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô%'),
                RouteProgress.notes.notlike('%–õ–ê–ë–û–†–ê–¢–û–†–ù–´–ï_–î–ê–ù–ù–´–ï%')
            )
        ).order_by(RouteProgress.visited_at)
        
        progresses = await session.scalars(stmt)
        progresses_list = progresses.all()
        
        if not progresses_list:
            await callback.answer("‚ùå –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        if point_index >= len(progresses_list):
            await callback.answer("‚ùå –¢–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        progress = progresses_list[point_index]
        photos = progress.photos
        
        if not photos:
            await callback.answer("‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ—Ç", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        await admin_show_route_photo(callback, photos, photo_index, session_id, point_index)
    
    await callback.answer()


@admin_router.callback_query(F.data == "admin_back_to_routes")
async def admin_back_to_routes(callback: CallbackQuery) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –º–∞—Ä—à—Ä—É—Ç–æ–≤."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    await callback.message.edit_text(
        "üõ£Ô∏è <b>–ú–û–ù–ò–¢–û–†–ò–ù–ì –ú–ê–†–®–†–£–¢–û–í</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=get_routes_monitoring_keyboard()
    )
    await callback.answer()