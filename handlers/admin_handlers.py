"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä—Å–∫–∏–º –±–æ—Ç–æ–º.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å–∏—Å—Ç–µ–º—ã:
- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ—Ç—á—ë—Ç–æ–≤
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤ –≤ –ú–æ—Å–∫–≤—É
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤

–î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –∏–º–µ—é—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
–∏–∑ —Å–ø–∏—Å–∫–∞ ADMIN_IDS –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
"""

import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, func, and_, desc
from sqlalchemy.orm import selectinload

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from database.database import get_session
from database.models import User, Route, RouteProgress, Delivery
from states.user_states import AdminStates
from config import ADMIN_IDS, MOSCOW_DELIVERY_ADDRESSES
from keyboards.admin_keyboards import (
    get_admin_menu_keyboard,
    get_deliveries_keyboard,
    get_statistics_keyboard
)

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
admin_router = Router(name='admin_router')

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)


def is_admin(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    
    Args:
        user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, False –∏–Ω–∞—á–µ
    """
    return user_id in ADMIN_IDS


@admin_router.message(Command('admin'))
async def cmd_admin(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin - –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await message.answer(
        "üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_menu_keyboard()
    )


@admin_router.callback_query(F.data == "admin_statistics")
async def show_statistics(callback: CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
    
    Args:
        callback: –û–±—ä–µ–∫—Ç callback query –æ—Ç –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    async for session in get_session():
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_count = await session.scalar(select(func.count(User.telegram_id)))
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        week_ago = datetime.utcnow() - timedelta(days=7)
        active_users = await session.scalar(
            select(func.count(User.telegram_id.distinct())).select_from(
                User.__table__.join(RouteProgress.__table__)
            ).where(RouteProgress.visited_at >= week_ago)
        )
        
        # –í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ
        total_routes = await session.scalar(
            select(func.count(RouteProgress.id))
        )
        
        # –í—Å–µ–≥–æ –∫–æ—Ä–æ–±–æ–∫ —Å–æ–±—Ä–∞–Ω–æ
        total_boxes = await session.scalar(
            select(func.sum(RouteProgress.boxes_count))
        ) or 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º
        org_stats = await session.execute(
            select(
                Route.organization,
                func.sum(RouteProgress.boxes_count).label('total_boxes'),
                func.count(RouteProgress.id).label('total_visits')
            )
            .join(RouteProgress)
            .group_by(Route.organization)
            .order_by(desc('total_boxes'))
        )
        
        org_data = org_stats.all()
        
        # Pending –¥–æ—Å—Ç–∞–≤–∫–∏
        pending_deliveries = await session.scalar(
            select(func.count(Delivery.id)).where(Delivery.status == 'pending')
        )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {users_count}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã –∑–∞ –Ω–µ–¥–µ–ª—é: {active_users or 0}\n\n"
        f"üì¶ <b>–°–±–æ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {total_routes or 0}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∫–æ—Ä–æ–±–æ–∫ —Å–æ–±—Ä–∞–Ω–æ: {total_boxes}\n\n"
        f"üè¢ <b>–ü–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º:</b>\n"
    )
    
    for org_row in org_data:
        stats_text += f"‚Ä¢ {org_row.organization}: {org_row.total_boxes} –∫–æ—Ä–æ–±–æ–∫ ({org_row.total_visits} –ø–æ—Å–µ—â–µ–Ω–∏–π)\n"
    
    stats_text += f"\nüöö <b>–î–æ—Å—Ç–∞–≤–∫–∏ –≤ –ú–æ—Å–∫–≤—É:</b>\n"
    stats_text += f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {pending_deliveries or 0}"
    
    await callback.message.edit_text(
        text=stats_text,
        reply_markup=get_statistics_keyboard()
    )
    
    await callback.answer()


@admin_router.callback_query(F.data == "admin_deliveries")
async def show_deliveries(callback: CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∞–≤–æ–∫, –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –ú–æ—Å–∫–≤—É.
    
    Args:
        callback: –û–±—ä–µ–∫—Ç callback query –æ—Ç –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç–∞–≤–æ–∫
    """
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º pending –¥–æ—Å—Ç–∞–≤–∫–∏
        stmt = select(Delivery).where(
            Delivery.status == 'pending'
        ).order_by(Delivery.created_at.desc())
        
        deliveries = await session.scalars(stmt)
        deliveries_list = deliveries.all()
    
    if not deliveries_list:
        await callback.message.edit_text(
            "üì≠ –ù–µ—Ç –¥–æ—Å—Ç–∞–≤–æ–∫, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏",
            reply_markup=get_admin_menu_keyboard()
        )
        await callback.answer()
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º
    org_deliveries = {}
    for delivery in deliveries_list:
        org = delivery.organization
        if org not in org_deliveries:
            org_deliveries[org] = {
                'total_boxes': 0,
                'deliveries_count': 0,
                'addresses': set()
            }
        
        org_deliveries[org]['total_boxes'] += delivery.total_boxes
        org_deliveries[org]['deliveries_count'] += 1
        org_deliveries[org]['addresses'].add(delivery.delivery_address)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç–Ω—ã–π –ª–∏—Å—Ç
    deliveries_text = (
        f"üöö <b>–ú–∞—Ä—à—Ä—É—Ç–Ω—ã–π –ª–∏—Å—Ç –≤ –ú–æ—Å–∫–≤—É</b>\n"
        f"üìÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
    )
    
    total_all_boxes = 0
    for org, data in org_deliveries.items():
        total_all_boxes += data['total_boxes']
        
        deliveries_text += (
            f"üè¢ <b>{org}</b>\n"
            f"üì¶ –ö–æ—Ä–æ–±–æ–∫: {data['total_boxes']}\n"
            f"üìç –ê–¥—Ä–µ—Å: {MOSCOW_DELIVERY_ADDRESSES.get(org, {}).get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {MOSCOW_DELIVERY_ADDRESSES.get(org, {}).get('contact', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {MOSCOW_DELIVERY_ADDRESSES.get(org, {}).get('working_hours', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        )
    
    deliveries_text += f"üìä <b>–ò—Ç–æ–≥–æ –∫–æ—Ä–æ–±–æ–∫: {total_all_boxes}</b>"
    
    await callback.message.edit_text(
        text=deliveries_text,
        reply_markup=get_deliveries_keyboard()
    )
    
    await callback.answer()


@admin_router.callback_query(F.data == "confirm_deliveries")
async def confirm_deliveries(callback: CallbackQuery) -> None:
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–æ–∫ –∏ –º–µ–Ω—è–µ—Ç –∏—Ö —Å—Ç–∞—Ç—É—Å.
    
    Args:
        callback: –û–±—ä–µ–∫—Ç callback query –æ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    """
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    async for session in get_session():
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö pending –¥–æ—Å—Ç–∞–≤–æ–∫
        stmt = select(Delivery).where(Delivery.status == 'pending')
        deliveries = await session.scalars(stmt)
        
        updated_count = 0
        for delivery in deliveries:
            delivery.status = 'confirmed'
            updated_count += 1
        
        await session.commit()
    
    await callback.message.edit_text(
        f"‚úÖ <b>–î–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!</b>\n\n"
        f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {updated_count}\n"
        f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ 'confirmed'\n\n"
        f"–ú–∞—Ä—à—Ä—É—Ç–Ω—ã–π –ª–∏—Å—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –ø–µ—á–∞—Ç–∏.",
        reply_markup=get_admin_menu_keyboard()
    )
    
    await callback.answer("–î–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!")


@admin_router.callback_query(F.data == "admin_users")
async def show_users(callback: CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã.
    
    Args:
        callback: –û–±—ä–µ–∫—Ç callback query –æ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stmt = select(
            User.telegram_id,
            User.username,
            User.full_name,
            User.is_active,
            User.created_at,
            func.count(RouteProgress.id).label('routes_count'),
            func.sum(RouteProgress.boxes_count).label('total_boxes')
        ).outerjoin(RouteProgress).group_by(
            User.telegram_id
        ).order_by(User.created_at.desc()).limit(20)
        
        users_data = await session.execute(stmt)
        users_list = users_data.all()
    
    if not users_list:
        await callback.message.edit_text(
            "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            reply_markup=get_admin_menu_keyboard()
        )
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_text = "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
    
    for user_data in users_list[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
        status = "üü¢" if user_data.is_active else "üî¥"
        username = f"@{user_data.username}" if user_data.username else "–ë–µ–∑ username"
        
        users_text += (
            f"{status} <b>{user_data.full_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}</b>\n"
            f"ID: {user_data.telegram_id}\n"
            f"Username: {username}\n"
            f"–ú–∞—Ä—à—Ä—É—Ç–æ–≤: {user_data.routes_count or 0}\n"
            f"–ö–æ—Ä–æ–±–æ–∫: {user_data.total_boxes or 0}\n"
            f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_data.created_at.strftime('%d.%m.%Y')}\n\n"
        )
    
    await callback.message.edit_text(
        text=users_text,
        reply_markup=get_admin_menu_keyboard()
    )
    
    await callback.answer()


# –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@admin_router.callback_query(F.data == "admin_menu")
async def back_to_admin_menu(callback: CallbackQuery) -> None:
    """
    –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    
    Args:
        callback: –û–±—ä–µ–∫—Ç callback query
    """
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_menu_keyboard()
    )
    
    await callback.answer()
