"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ Telegram.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ
–ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –º–∞—Ä—à—Ä—É—Ç–∞.
"""

from typing import Dict, List, Tuple
from aiogram.utils.markdown import bold, italic


def create_progress_bar(current: int, total: int, width: int = 10) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç ASCII –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram.
    
    Args:
        current: –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è
        total: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
        width: –®–∏—Ä–∏–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    """
    filled = int(width * current / total)
    empty = width - filled
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    bar = "üü¶" * filled + "‚¨úÔ∏è" * empty
    percentage = int(100 * current / total)
    
    return f"{bar} {percentage}%"


def format_route_progress(
    city: str,
    current_point: Dict,
    total_points: int,
    current_index: int,
    collected_containers: Dict[str, int]
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –º–∞—Ä—à—Ä—É—Ç–∞.
    
    Args:
        city: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        current_point: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–µ
        total_points: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
        current_index: –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å (0-based)
        collected_containers: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    """
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progress = create_progress_bar(current_index + 1, total_points)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ–±—Ä–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º
    containers_info = []
    total_containers = 0
    for org, count in collected_containers.items():
        containers_info.append(f"‚Ä¢ {org}: {count} üì¶")
        total_containers += count
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_parts = [
        f"üèôÔ∏è {bold(f'–ú–∞—Ä—à—Ä—É—Ç: {city}')}",
        f"üìç {bold(f'–¢–æ—á–∫–∞ {current_index + 1} –∏–∑ {total_points}')}",
        f"\n{progress}\n",
        f"üè¢ {bold('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:')} {current_point['organization']}",
        f"üìç {bold('–ê–¥—Ä–µ—Å:')} {current_point['address']}",
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if containers_info:
        message_parts.extend([
            f"\nüìä {bold('–°–æ–±—Ä–∞–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:')}",
            *containers_info,
            f"üì¶ {bold(f'–í—Å–µ–≥–æ: {total_containers}')}"
        ])
    
    return "\n".join(message_parts)


def format_route_summary(
    city: str,
    total_points: int,
    collected_containers: Dict[str, int],
    total_time: str
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º –º–∞—Ä—à—Ä—É—Ç–µ.
    
    Args:
        city: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        total_points: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
        collected_containers: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º
        total_time: –û–±—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–∞–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞
    """
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä (–ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π)
    progress = create_progress_bar(total_points, total_points)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ–±—Ä–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º
    containers_info = []
    total_containers = 0
    for org, count in collected_containers.items():
        containers_info.append(f"‚Ä¢ {org}: {count} üì¶")
        total_containers += count
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_parts = [
        f"‚úÖ {bold(f'–ú–∞—Ä—à—Ä—É—Ç {city} –∑–∞–≤–µ—Ä—à–µ–Ω!')}",
        f"\n{progress}\n",
        f"üìä {bold('–ò—Ç–æ–≥–∏ –º–∞—Ä—à—Ä—É—Ç–∞:')}",
        f"üìç –ü–æ—Å–µ—â–µ–Ω–æ —Ç–æ—á–µ–∫: {total_points}",
        f"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time}",
        f"\nüì¶ {bold('–°–æ–±—Ä–∞–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:')}",
        *containers_info,
        f"\n{bold(f'–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {total_containers} üì¶')}"
    ]
    
    return "\n".join(message_parts)
