"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è:
- –ê–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
- –†–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤
"""

from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession
from database.models import RouteProgress, Route, User


async def get_route_statistics(
    session: AsyncSession,
    user_id: Optional[int] = None,
    days: Optional[int] = None
) -> Dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∞—Ä—à—Ä—É—Ç–∞–º.
    
    Args:
        session: –°–µ—Å—Å–∏—è SQLAlchemy
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    query = select(RouteProgress).join(Route)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if user_id:
        query = query.filter(RouteProgress.user_id == user_id)
    if days:
        date_from = datetime.now() - timedelta(days=days)
        query = query.filter(RouteProgress.visited_at >= date_from)
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏
    result = await session.execute(query)
    progresses = result.scalars().all()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–∞—Ä—à—Ä—É—Ç–∞–º
    routes_data = {}
    for progress in progresses:
        route_key = progress.route.city_name
        if route_key not in routes_data:
            routes_data[route_key] = {
                'total_routes': 0,
                'total_containers': 0,
                'total_time': timedelta(),
                'points_visited': 0,
                'completion_times': []
            }
        
        routes_data[route_key]['total_routes'] += 1
        routes_data[route_key]['total_containers'] += progress.containers_count
        routes_data[route_key]['points_visited'] += 1
        routes_data[route_key]['completion_times'].append(progress.visited_at)
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    statistics = {
        'total_routes_completed': 0,
        'total_containers_collected': 0,
        'total_points_visited': 0,
        'routes_details': {},
        'top_performers': [],
        'busiest_days': []
    }
    
    for city, data in routes_data.items():
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        completion_times = sorted(data['completion_times'])
        if len(completion_times) >= 2:
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
            time_diffs = [
                (t2 - t1).total_seconds() / 60  # –≤ –º–∏–Ω—É—Ç–∞—Ö
                for t1, t2 in zip(completion_times[:-1], completion_times[1:])
            ]
            avg_time_between_points = sum(time_diffs) / len(time_diffs)
        else:
            avg_time_between_points = 0
        
        statistics['routes_details'][city] = {
            'total_routes': data['total_routes'],
            'total_containers': data['total_containers'],
            'points_visited': data['points_visited'],
            'avg_boxes_per_route': data['total_containers'] / data['total_routes'],
            'avg_time_between_points': avg_time_between_points
        }
        
        statistics['total_routes_completed'] += data['total_routes']
        statistics['total_containers_collected'] += data['total_containers']
        statistics['total_points_visited'] += data['points_visited']
    
    return statistics


async def get_user_performance(
    session: AsyncSession,
    days: Optional[int] = None,
    limit: int = 5
) -> List[Dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—É—Ä—å–µ—Ä–æ–≤.
    
    Args:
        session: –°–µ—Å—Å–∏—è SQLAlchemy
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—É—á—à–∏—Ö –∫—É—Ä—å–µ—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏
    
    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –∫–∞–∂–¥–æ–º—É –∫—É—Ä—å–µ—Ä—É
    """
    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    query = (
        select(
            RouteProgress.user_id,
            func.count(RouteProgress.id).label('total_routes'),
            func.sum(RouteProgress.containers_count).label('total_containers')
        )
        .group_by(RouteProgress.user_id)
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if days:
        date_from = datetime.now() - timedelta(days=days)
        query = query.filter(RouteProgress.visited_at >= date_from)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    result = await session.execute(query)
    stats = result.all()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    user_stats = []
    for user_id, total_routes, total_containers in stats:
        user = await session.get(User, user_id)
        if user:
            user_stats.append({
                'user_id': user_id,
                'username': user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
                'total_routes': total_routes,
                'total_containers': total_containers,
                'avg_boxes_per_route': total_containers / total_routes if total_routes else 0
            })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    user_stats.sort(key=lambda x: x['total_containers'], reverse=True)
    
    return user_stats[:limit]


async def get_busiest_days(
    session: AsyncSession,
    days: Optional[int] = None,
    limit: int = 5
) -> List[Dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–∞–º—ã–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–Ω—è–º.
    
    Args:
        session: –°–µ—Å—Å–∏—è SQLAlchemy
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∫–∏
    
    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –∫–∞–∂–¥–æ–º—É –¥–Ω—é
    """
    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–Ω—è–º
    query = (
        select(
            func.date(RouteProgress.visited_at).label('date'),
            func.count(RouteProgress.id).label('total_routes'),
            func.sum(RouteProgress.containers_count).label('total_containers')
        )
        .group_by(func.date(RouteProgress.visited_at))
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if days:
        date_from = datetime.now() - timedelta(days=days)
        query = query.filter(RouteProgress.visited_at >= date_from)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    result = await session.execute(query)
    stats = result.all()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    daily_stats = [
        {
            'date': date.strftime('%d.%m.%Y'),
            'total_routes': total_routes,
            'total_containers': total_containers,
            'avg_boxes_per_route': total_containers / total_routes if total_routes else 0
        }
        for date, total_routes, total_containers in stats
    ]
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–∞—Ä—à—Ä—É—Ç–æ–≤
    daily_stats.sort(key=lambda x: x['total_routes'], reverse=True)
    
    return daily_stats[:limit]


def format_statistics_message(statistics: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram.
    
    Args:
        statistics: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    message_parts = [
        "üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤:</b>\n",
        f"üöö –í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {statistics['total_routes_completed']}",
        f"üì¶ –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {statistics['total_containers_collected']}",
        f"üìç –í—Å–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–æ —Ç–æ—á–µ–∫: {statistics['total_points_visited']}\n",
        "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º:</b>"
    ]
    
    for city, data in statistics['routes_details'].items():
        message_parts.extend([
            f"\nüèô <b>{city}:</b>",
            f"‚Ä¢ –ú–∞—Ä—à—Ä—É—Ç–æ–≤: {data['total_routes']}",
            f"‚Ä¢ –°–æ–±—Ä–∞–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {data['total_containers']}",
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏: {data['avg_time_between_points']:.1f} –º–∏–Ω"
        ])
    
    return "\n".join(message_parts)
