"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä,
–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –±–æ—Ç–∞.
"""

from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from typing import List, Optional


def get_admin_menu_keyboard() -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    
    Returns:
        ReplyKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∞–¥–º–∏–Ω-–º–µ–Ω—é
    """
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                KeyboardButton(text="üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏")
            ],
            [
                KeyboardButton(text="üè¢ –°–∫–ª–∞–¥ –Ø—Ä–æ—Å–ª–∞–≤–ª—å"),
                KeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤")
            ],
            [
                KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
                KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            ]
        ],
        resize_keyboard=True
    )
    return keyboard


def get_statistics_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    callback_data="stats_general"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É—Ä—å–µ—Ä–æ–≤",
                    callback_data="stats_couriers"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üõ£Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ä—à—Ä—É—Ç–æ–≤",
                    callback_data="stats_routes_monitoring"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è",
                    callback_data="stats_today"
                ),
                InlineKeyboardButton(
                    text="üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é",
                    callback_data="stats_week"
                ),
                InlineKeyboardButton(
                    text="üìÖ –ó–∞ –º–µ—Å—è—Ü",
                    callback_data="stats_month"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                    callback_data="stats_refresh"
                ),
                InlineKeyboardButton(
                    text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
                    callback_data="stats_close"
                )
            ]
        ]
    )
    return keyboard


def get_export_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤.
    
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
    """
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìä Excel –æ—Ç—á–µ—Ç",
                    callback_data="export_excel"
                ),
                InlineKeyboardButton(
                    text="üìÑ PDF –æ—Ç—á–µ—Ç",
                    callback_data="export_pdf"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìÖ –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥",
                    callback_data="export_select_period"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
                    callback_data="export_close"
                )
            ]
        ]
    )
    return keyboard


def get_settings_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    """
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞–º–∏",
                    callback_data="settings_couriers"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üõ£ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏",
                    callback_data="settings_routes"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîÑ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ",
                    callback_data="settings_backup"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
                    callback_data="settings_close"
                )
            ]
        ]
    )
    return keyboard


def get_period_selection_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–∞.
    
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    """
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìÖ –°–µ–≥–æ–¥–Ω—è",
                    callback_data="period_today"
                ),
                InlineKeyboardButton(
                    text="üìÖ –í—á–µ—Ä–∞",
                    callback_data="period_yesterday"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìÖ –ù–µ–¥–µ–ª—è",
                    callback_data="period_week"
                ),
                InlineKeyboardButton(
                    text="üìÖ –ú–µ—Å—è—Ü",
                    callback_data="period_month"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã",
                    callback_data="period_custom"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="period_cancel"
                )
            ]
        ]
    )
    return keyboard


def get_warehouse_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º.
    
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º
    """
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
                    callback_data="warehouse_status"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üöö –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç –≤ –ú–æ—Å–∫–≤—É",
                    callback_data="warehouse_create_moscow_route"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìà –ó–∞ —Å–µ–≥–æ–¥–Ω—è",
                    callback_data="warehouse_today"
                ),
                InlineKeyboardButton(
                    text="üìà –ó–∞ –Ω–µ–¥–µ–ª—é",
                    callback_data="warehouse_week"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìà –ó–∞ –º–µ—Å—è—Ü",
                    callback_data="warehouse_month"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                    callback_data="warehouse_refresh"
                ),
                InlineKeyboardButton(
                    text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
                    callback_data="warehouse_close"
                )
            ]
        ]
    )
    return keyboard


def get_routes_monitoring_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤.
    
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
    """
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã",
                    callback_data="routes_active"
                ),
                InlineKeyboardButton(
                    text="‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã",
                    callback_data="routes_completed"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìç –ú–∞—Ä—à—Ä—É—Ç—ã –ø–æ –≥–æ—Ä–æ–¥–∞–º",
                    callback_data="routes_by_cities"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üöö –ú–∞—Ä—à—Ä—É—Ç—ã –≤ –ú–æ—Å–∫–≤—É",
                    callback_data="routes_moscow"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìä –°–≤–æ–¥–∫–∞",
                    callback_data="routes_summary"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                    callback_data="routes_refresh"
                ),
                InlineKeyboardButton(
                    text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
                    callback_data="routes_close"
                )
            ]
        ]
    )
    return keyboard


def get_route_details_keyboard(route_session_id: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞.
    
    Args:
        route_session_id: ID —Å–µ—Å—Å–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
        
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ä—à—Ä—É—Ç–æ–º
    """
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üì∏ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ",
                    callback_data=f"route_photos:{route_session_id}"
                ),
                InlineKeyboardButton(
                    text="üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
                    callback_data=f"route_comments:{route_session_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                    callback_data=f"route_details:{route_session_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
                    callback_data="routes_back_to_list"
                )
            ]
        ]
    )
    return keyboard


def get_city_selection_keyboard(cities: list) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞.
    
    Args:
        cities: –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
        
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥–æ—Ä–æ–¥–æ–≤
    """
    buttons = []
    for city in cities:
        buttons.append([
            InlineKeyboardButton(
                text=f"üìç {city}",
                callback_data=f"city_routes:{city}"
            )
        ])
    
    buttons.append([
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="routes_monitoring_back"
        )
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ö–µ—à–µ–π —Å –ø–æ–ª–Ω—ã–º–∏ route_id
_route_hash_map = {}

def get_admin_route_selection_keyboard(routes_data: list, has_more: bool = False, offset: int = 0) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞).
    
    Args:
        routes_data: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
        has_more: –ï—Å—Ç—å –ª–∏ –µ—â–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        offset: –¢–µ–∫—É—â–∏–π —Å–¥–≤–∏–≥ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
    """
    keyboard_rows = []
    
    for i, route_data in enumerate(routes_data):
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: –¥–∞—Ç–∞ - –≥–æ—Ä–æ–¥ - –∫—É—Ä—å–µ—Ä - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
        date = route_data.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        city = route_data.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        username = route_data.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        points_count = route_data.get('points_count', 0)
        total_containers = route_data.get('total_containers', 0)
        status = route_data.get('status', 'unknown')
        
        # –≠–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
        status_emoji = {
            'active': 'üü¢',
            'paused': 'üü°', 
            'completed': '‚úÖ',
            'inactive': '‚ö™'
        }.get(status, '‚ùì')
        
        button_text = f"{status_emoji} {date} {city} - {username} ({points_count}—Ç, {total_containers}–∫)"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à –æ—Ç route_id –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö callback_data
        import hashlib
        route_hash = hashlib.md5(route_data['route_id'].encode()).hexdigest()[:8]
        callback_data = f"admin_route:{route_hash}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ö–µ—à–∞ –∏ –ø–æ–ª–Ω–æ–≥–æ route_id
        _route_hash_map[route_hash] = route_data['route_id']
        
        keyboard_rows.append([
            InlineKeyboardButton(
                text=button_text,
                callback_data=callback_data
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ" –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
    if has_more:
        keyboard_rows.append([
            InlineKeyboardButton(
                text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ",
                callback_data=f"admin_load_more_routes:{offset + len(routes_data)}"
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    keyboard_rows.append([
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É",
            callback_data="routes_monitoring_back"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard_rows)


def get_admin_route_detail_keyboard(
    route_id: str,
    current_point_index: int,
    total_points: int,
    has_photos: bool = False,
    has_lab_data: bool = False
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞).
    
    Args:
        route_id: ID –º–∞—Ä—à—Ä—É—Ç–∞ (route_session_id)
        current_point_index: –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–∏ (0-based)
        total_points: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
        has_photos: –ï—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–∏
        has_lab_data: –ï—Å—Ç—å –ª–∏ –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è–º
    
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    """
    keyboard_rows = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ç–æ—á–∫–∞–º
    nav_buttons = []
    if current_point_index > 0:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ç–æ—á–∫–∞",
                callback_data=f"admin_route_point:{get_hash_by_route_id(route_id)}:{current_point_index - 1}"[:64]
            )
        )
    
    if current_point_index < total_points - 1:
        nav_buttons.append(
            InlineKeyboardButton(
                text="–°–ª–µ–¥—É—é—â–∞—è —Ç–æ—á–∫–∞ ‚û°Ô∏è",
                callback_data=f"admin_route_point:{get_hash_by_route_id(route_id)}:{current_point_index + 1}"[:64]
            )
        )
    
    if nav_buttons:
        keyboard_rows.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if has_photos:
        keyboard_rows.append([
            InlineKeyboardButton(
                text="üì∏ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
                callback_data=f"admin_view_photos:{get_hash_by_route_id(route_id)}:{current_point_index}"[:64]
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if has_lab_data:
        keyboard_rows.append([
            InlineKeyboardButton(
                text="üè• –î–∞–Ω–Ω—ã–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π",
                callback_data=f"admin_lab_data:{get_hash_by_route_id(route_id)}"
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –º–∞—Ä—à—Ä—É—Ç–æ–≤
    keyboard_rows.append([
        InlineKeyboardButton(
            text="üìã –ö —Å–ø–∏—Å–∫—É –º–∞—Ä—à—Ä—É—Ç–æ–≤",
            callback_data="admin_back_to_routes"
        )
    ])
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    keyboard_rows.append([
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É",
            callback_data="routes_monitoring_back"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard_rows)


def get_admin_photos_viewer_keyboard(
    route_id: str,
    point_index: int,
    current_photo_index: int,
    total_photos: int
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–∞).
    
    Args:
        route_id: ID –º–∞—Ä—à—Ä—É—Ç–∞
        point_index: –ò–Ω–¥–µ–∫—Å —Ç–æ—á–∫–∏
        current_photo_index: –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        total_photos: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º
    """
    keyboard_rows = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º
    nav_buttons = []
    if current_photo_index > 0:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Ñ–æ—Ç–æ",
                callback_data=f"admin_photo:{get_hash_by_route_id(route_id)}:{point_index}:{current_photo_index - 1}"
            )
        )
    
    if current_photo_index < total_photos - 1:
        nav_buttons.append(
            InlineKeyboardButton(
                text="–°–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ ‚û°Ô∏è",
                callback_data=f"admin_photo:{get_hash_by_route_id(route_id)}:{point_index}:{current_photo_index + 1}"
            )
        )
    
    if nav_buttons:
        keyboard_rows.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –¥–µ—Ç–∞–ª—è–º —Ç–æ—á–∫–∏
    keyboard_rows.append([
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ö –¥–µ—Ç–∞–ª—è–º —Ç–æ—á–∫–∏",
            callback_data=f"admin_route_point:{get_hash_by_route_id(route_id)}:{point_index}"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

def get_route_id_by_hash(route_hash: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π route_id –ø–æ —Ö–µ—à—É."""
    return _route_hash_map.get(route_hash, route_hash)


def get_hash_by_route_id(route_id: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ö–µ—à –ø–æ –ø–æ–ª–Ω–æ–º—É route_id."""
    import hashlib
    import re
    
    # –û—á–∏—â–∞–µ–º route_id –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    clean_route_id = re.sub(r'[^\w\-_.]', '_', str(route_id))
    route_hash = hashlib.md5(clean_route_id.encode()).hexdigest()[:8]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º route_id
    _route_hash_map[route_hash] = route_id
    return route_hash
